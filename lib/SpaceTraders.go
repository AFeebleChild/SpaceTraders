// Package lib provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package lib

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AgentTokenScopes = "AgentToken.Scopes"
)

// Defines values for ContractType.
const (
	ContractTypePROCUREMENT ContractType = "PROCUREMENT"
	ContractTypeSHUTTLE     ContractType = "SHUTTLE"
	ContractTypeTRANSPORT   ContractType = "TRANSPORT"
)

// Defines values for FactionTraitSymbol.
const (
	FactionTraitSymbolADAPTABLE               FactionTraitSymbol = "ADAPTABLE"
	FactionTraitSymbolAGGRESSIVE              FactionTraitSymbol = "AGGRESSIVE"
	FactionTraitSymbolBOLD                    FactionTraitSymbol = "BOLD"
	FactionTraitSymbolBRUTAL                  FactionTraitSymbol = "BRUTAL"
	FactionTraitSymbolBUREAUCRATIC            FactionTraitSymbol = "BUREAUCRATIC"
	FactionTraitSymbolCAPITALISTIC            FactionTraitSymbol = "CAPITALISTIC"
	FactionTraitSymbolCLAN                    FactionTraitSymbol = "CLAN"
	FactionTraitSymbolCOLLABORATIVE           FactionTraitSymbol = "COLLABORATIVE"
	FactionTraitSymbolCOMMERCIAL              FactionTraitSymbol = "COMMERCIAL"
	FactionTraitSymbolCOOPERATIVE             FactionTraitSymbol = "COOPERATIVE"
	FactionTraitSymbolCURIOUS                 FactionTraitSymbol = "CURIOUS"
	FactionTraitSymbolDARING                  FactionTraitSymbol = "DARING"
	FactionTraitSymbolDEFENSIVE               FactionTraitSymbol = "DEFENSIVE"
	FactionTraitSymbolDEXTEROUS               FactionTraitSymbol = "DEXTEROUS"
	FactionTraitSymbolDISTRUSTFUL             FactionTraitSymbol = "DISTRUSTFUL"
	FactionTraitSymbolDIVERSE                 FactionTraitSymbol = "DIVERSE"
	FactionTraitSymbolDOMINANT                FactionTraitSymbol = "DOMINANT"
	FactionTraitSymbolDOMINION                FactionTraitSymbol = "DOMINION"
	FactionTraitSymbolENTREPRENEURIAL         FactionTraitSymbol = "ENTREPRENEURIAL"
	FactionTraitSymbolESTABLISHED             FactionTraitSymbol = "ESTABLISHED"
	FactionTraitSymbolEXILES                  FactionTraitSymbol = "EXILES"
	FactionTraitSymbolEXPLORATORY             FactionTraitSymbol = "EXPLORATORY"
	FactionTraitSymbolFLEETING                FactionTraitSymbol = "FLEETING"
	FactionTraitSymbolFLEXIBLE                FactionTraitSymbol = "FLEXIBLE"
	FactionTraitSymbolFORSAKEN                FactionTraitSymbol = "FORSAKEN"
	FactionTraitSymbolFRAGMENTED              FactionTraitSymbol = "FRAGMENTED"
	FactionTraitSymbolFREEMARKETS             FactionTraitSymbol = "FREE_MARKETS"
	FactionTraitSymbolFRINGE                  FactionTraitSymbol = "FRINGE"
	FactionTraitSymbolGUILD                   FactionTraitSymbol = "GUILD"
	FactionTraitSymbolIMPERIALISTIC           FactionTraitSymbol = "IMPERIALISTIC"
	FactionTraitSymbolINDEPENDENT             FactionTraitSymbol = "INDEPENDENT"
	FactionTraitSymbolINDUSTRIOUS             FactionTraitSymbol = "INDUSTRIOUS"
	FactionTraitSymbolINESCAPABLE             FactionTraitSymbol = "INESCAPABLE"
	FactionTraitSymbolINNOVATIVE              FactionTraitSymbol = "INNOVATIVE"
	FactionTraitSymbolINTELLIGENT             FactionTraitSymbol = "INTELLIGENT"
	FactionTraitSymbolISOLATED                FactionTraitSymbol = "ISOLATED"
	FactionTraitSymbolLOCALIZED               FactionTraitSymbol = "LOCALIZED"
	FactionTraitSymbolMILITARISTIC            FactionTraitSymbol = "MILITARISTIC"
	FactionTraitSymbolNOTABLE                 FactionTraitSymbol = "NOTABLE"
	FactionTraitSymbolPEACEFUL                FactionTraitSymbol = "PEACEFUL"
	FactionTraitSymbolPIRATES                 FactionTraitSymbol = "PIRATES"
	FactionTraitSymbolPROGRESSIVE             FactionTraitSymbol = "PROGRESSIVE"
	FactionTraitSymbolPROUD                   FactionTraitSymbol = "PROUD"
	FactionTraitSymbolRAIDERS                 FactionTraitSymbol = "RAIDERS"
	FactionTraitSymbolREBELLIOUS              FactionTraitSymbol = "REBELLIOUS"
	FactionTraitSymbolRESEARCHFOCUSED         FactionTraitSymbol = "RESEARCH_FOCUSED"
	FactionTraitSymbolRESOURCEFUL             FactionTraitSymbol = "RESOURCEFUL"
	FactionTraitSymbolSCAVENGERS              FactionTraitSymbol = "SCAVENGERS"
	FactionTraitSymbolSECRETIVE               FactionTraitSymbol = "SECRETIVE"
	FactionTraitSymbolSELFINTERESTED          FactionTraitSymbol = "SELF_INTERESTED"
	FactionTraitSymbolSELFSUFFICIENT          FactionTraitSymbol = "SELF_SUFFICIENT"
	FactionTraitSymbolSMUGGLERS               FactionTraitSymbol = "SMUGGLERS"
	FactionTraitSymbolSTRATEGIC               FactionTraitSymbol = "STRATEGIC"
	FactionTraitSymbolTECHNOLOGICALLYADVANCED FactionTraitSymbol = "TECHNOLOGICALLY_ADVANCED"
	FactionTraitSymbolTREASUREHUNTERS         FactionTraitSymbol = "TREASURE_HUNTERS"
	FactionTraitSymbolUNITED                  FactionTraitSymbol = "UNITED"
	FactionTraitSymbolUNPREDICTABLE           FactionTraitSymbol = "UNPREDICTABLE"
	FactionTraitSymbolVISIONARY               FactionTraitSymbol = "VISIONARY"
	FactionTraitSymbolWELCOMING               FactionTraitSymbol = "WELCOMING"
)

// Defines values for MarketTradeGoodSupply.
const (
	MarketTradeGoodSupplyABUNDANT MarketTradeGoodSupply = "ABUNDANT"
	MarketTradeGoodSupplyLIMITED  MarketTradeGoodSupply = "LIMITED"
	MarketTradeGoodSupplyMODERATE MarketTradeGoodSupply = "MODERATE"
	MarketTradeGoodSupplySCARCE   MarketTradeGoodSupply = "SCARCE"
)

// Defines values for MarketTransactionType.
const (
	PURCHASE MarketTransactionType = "PURCHASE"
	SELL     MarketTransactionType = "SELL"
)

// Defines values for ShipCrewRotation.
const (
	RELAXED ShipCrewRotation = "RELAXED"
	STRICT  ShipCrewRotation = "STRICT"
)

// Defines values for ShipEngineSymbol.
const (
	ShipEngineSymbolENGINEHYPERDRIVEI   ShipEngineSymbol = "ENGINE_HYPER_DRIVE_I"
	ShipEngineSymbolENGINEIMPULSEDRIVEI ShipEngineSymbol = "ENGINE_IMPULSE_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEI     ShipEngineSymbol = "ENGINE_ION_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEII    ShipEngineSymbol = "ENGINE_ION_DRIVE_II"
)

// Defines values for ShipFrameSymbol.
const (
	FRAMECARRIER        ShipFrameSymbol = "FRAME_CARRIER"
	FRAMECRUISER        ShipFrameSymbol = "FRAME_CRUISER"
	FRAMEDESTROYER      ShipFrameSymbol = "FRAME_DESTROYER"
	FRAMEDRONE          ShipFrameSymbol = "FRAME_DRONE"
	FRAMEEXPLORER       ShipFrameSymbol = "FRAME_EXPLORER"
	FRAMEFIGHTER        ShipFrameSymbol = "FRAME_FIGHTER"
	FRAMEFRIGATE        ShipFrameSymbol = "FRAME_FRIGATE"
	FRAMEHEAVYFREIGHTER ShipFrameSymbol = "FRAME_HEAVY_FREIGHTER"
	FRAMEINTERCEPTOR    ShipFrameSymbol = "FRAME_INTERCEPTOR"
	FRAMELIGHTFREIGHTER ShipFrameSymbol = "FRAME_LIGHT_FREIGHTER"
	FRAMEMINER          ShipFrameSymbol = "FRAME_MINER"
	FRAMEPROBE          ShipFrameSymbol = "FRAME_PROBE"
	FRAMERACER          ShipFrameSymbol = "FRAME_RACER"
	FRAMESHUTTLE        ShipFrameSymbol = "FRAME_SHUTTLE"
	FRAMETRANSPORT      ShipFrameSymbol = "FRAME_TRANSPORT"
)

// Defines values for ShipModuleSymbol.
const (
	MODULECARGOHOLDI        ShipModuleSymbol = "MODULE_CARGO_HOLD_I"
	MODULECREWQUARTERSI     ShipModuleSymbol = "MODULE_CREW_QUARTERS_I"
	MODULEENVOYQUARTERSI    ShipModuleSymbol = "MODULE_ENVOY_QUARTERS_I"
	MODULEFUELREFINERYI     ShipModuleSymbol = "MODULE_FUEL_REFINERY_I"
	MODULEJUMPDRIVEI        ShipModuleSymbol = "MODULE_JUMP_DRIVE_I"
	MODULEJUMPDRIVEII       ShipModuleSymbol = "MODULE_JUMP_DRIVE_II"
	MODULEJUMPDRIVEIII      ShipModuleSymbol = "MODULE_JUMP_DRIVE_III"
	MODULEMICROREFINERYI    ShipModuleSymbol = "MODULE_MICRO_REFINERY_I"
	MODULEMINERALPROCESSORI ShipModuleSymbol = "MODULE_MINERAL_PROCESSOR_I"
	MODULEOREREFINERYI      ShipModuleSymbol = "MODULE_ORE_REFINERY_I"
	MODULEPASSENGERCABINI   ShipModuleSymbol = "MODULE_PASSENGER_CABIN_I"
	MODULESCIENCELABI       ShipModuleSymbol = "MODULE_SCIENCE_LAB_I"
	MODULESHIELDGENERATORI  ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_I"
	MODULESHIELDGENERATORII ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_II"
	MODULEWARPDRIVEI        ShipModuleSymbol = "MODULE_WARP_DRIVE_I"
	MODULEWARPDRIVEII       ShipModuleSymbol = "MODULE_WARP_DRIVE_II"
	MODULEWARPDRIVEIII      ShipModuleSymbol = "MODULE_WARP_DRIVE_III"
)

// Defines values for ShipMountDeposits.
const (
	ALUMINUMORE     ShipMountDeposits = "ALUMINUM_ORE"
	AMMONIAICE      ShipMountDeposits = "AMMONIA_ICE"
	COPPERORE       ShipMountDeposits = "COPPER_ORE"
	DIAMONDS        ShipMountDeposits = "DIAMONDS"
	GOLDORE         ShipMountDeposits = "GOLD_ORE"
	ICEWATER        ShipMountDeposits = "ICE_WATER"
	IRONORE         ShipMountDeposits = "IRON_ORE"
	MERITIUMORE     ShipMountDeposits = "MERITIUM_ORE"
	PLATINUMORE     ShipMountDeposits = "PLATINUM_ORE"
	PRECIOUSSTONES  ShipMountDeposits = "PRECIOUS_STONES"
	QUARTZSAND      ShipMountDeposits = "QUARTZ_SAND"
	SILICONCRYSTALS ShipMountDeposits = "SILICON_CRYSTALS"
	SILVERORE       ShipMountDeposits = "SILVER_ORE"
	URANITEORE      ShipMountDeposits = "URANITE_ORE"
)

// Defines values for ShipMountSymbol.
const (
	MOUNTGASSIPHONI       ShipMountSymbol = "MOUNT_GAS_SIPHON_I"
	MOUNTGASSIPHONII      ShipMountSymbol = "MOUNT_GAS_SIPHON_II"
	MOUNTGASSIPHONIII     ShipMountSymbol = "MOUNT_GAS_SIPHON_III"
	MOUNTLASERCANNONI     ShipMountSymbol = "MOUNT_LASER_CANNON_I"
	MOUNTMININGLASERI     ShipMountSymbol = "MOUNT_MINING_LASER_I"
	MOUNTMININGLASERII    ShipMountSymbol = "MOUNT_MINING_LASER_II"
	MOUNTMININGLASERIII   ShipMountSymbol = "MOUNT_MINING_LASER_III"
	MOUNTMISSILELAUNCHERI ShipMountSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	MOUNTSENSORARRAYI     ShipMountSymbol = "MOUNT_SENSOR_ARRAY_I"
	MOUNTSENSORARRAYII    ShipMountSymbol = "MOUNT_SENSOR_ARRAY_II"
	MOUNTSENSORARRAYIII   ShipMountSymbol = "MOUNT_SENSOR_ARRAY_III"
	MOUNTSURVEYORI        ShipMountSymbol = "MOUNT_SURVEYOR_I"
	MOUNTSURVEYORII       ShipMountSymbol = "MOUNT_SURVEYOR_II"
	MOUNTSURVEYORIII      ShipMountSymbol = "MOUNT_SURVEYOR_III"
	MOUNTTURRETI          ShipMountSymbol = "MOUNT_TURRET_I"
)

// Defines values for ShipNavFlightMode.
const (
	BURN    ShipNavFlightMode = "BURN"
	CRUISE  ShipNavFlightMode = "CRUISE"
	DRIFT   ShipNavFlightMode = "DRIFT"
	STEALTH ShipNavFlightMode = "STEALTH"
)

// Defines values for ShipNavStatus.
const (
	DOCKED    ShipNavStatus = "DOCKED"
	INORBIT   ShipNavStatus = "IN_ORBIT"
	INTRANSIT ShipNavStatus = "IN_TRANSIT"
)

// Defines values for ShipReactorSymbol.
const (
	REACTORANTIMATTERI ShipReactorSymbol = "REACTOR_ANTIMATTER_I"
	REACTORCHEMICALI   ShipReactorSymbol = "REACTOR_CHEMICAL_I"
	REACTORFISSIONI    ShipReactorSymbol = "REACTOR_FISSION_I"
	REACTORFUSIONI     ShipReactorSymbol = "REACTOR_FUSION_I"
	REACTORSOLARI      ShipReactorSymbol = "REACTOR_SOLAR_I"
)

// Defines values for ShipRole.
const (
	ShipRoleCARRIER     ShipRole = "CARRIER"
	ShipRoleCOMMAND     ShipRole = "COMMAND"
	ShipRoleEXCAVATOR   ShipRole = "EXCAVATOR"
	ShipRoleEXPLORER    ShipRole = "EXPLORER"
	ShipRoleFABRICATOR  ShipRole = "FABRICATOR"
	ShipRoleHARVESTER   ShipRole = "HARVESTER"
	ShipRoleHAULER      ShipRole = "HAULER"
	ShipRoleINTERCEPTOR ShipRole = "INTERCEPTOR"
	ShipRolePATROL      ShipRole = "PATROL"
	ShipRoleREFINERY    ShipRole = "REFINERY"
	ShipRoleREPAIR      ShipRole = "REPAIR"
	ShipRoleSATELLITE   ShipRole = "SATELLITE"
	ShipRoleSURVEYOR    ShipRole = "SURVEYOR"
	ShipRoleTRANSPORT   ShipRole = "TRANSPORT"
)

// Defines values for ShipType.
const (
	SHIPCOMMANDFRIGATE    ShipType = "SHIP_COMMAND_FRIGATE"
	SHIPEXPLORER          ShipType = "SHIP_EXPLORER"
	SHIPHEAVYFREIGHTER    ShipType = "SHIP_HEAVY_FREIGHTER"
	SHIPINTERCEPTOR       ShipType = "SHIP_INTERCEPTOR"
	SHIPLIGHTHAULER       ShipType = "SHIP_LIGHT_HAULER"
	SHIPLIGHTSHUTTLE      ShipType = "SHIP_LIGHT_SHUTTLE"
	SHIPMININGDRONE       ShipType = "SHIP_MINING_DRONE"
	SHIPOREHOUND          ShipType = "SHIP_ORE_HOUND"
	SHIPPROBE             ShipType = "SHIP_PROBE"
	SHIPREFININGFREIGHTER ShipType = "SHIP_REFINING_FREIGHTER"
)

// Defines values for SurveySize.
const (
	SurveySizeLARGE    SurveySize = "LARGE"
	SurveySizeMODERATE SurveySize = "MODERATE"
	SurveySizeSMALL    SurveySize = "SMALL"
)

// Defines values for SystemType.
const (
	SystemTypeBLACKHOLE   SystemType = "BLACK_HOLE"
	SystemTypeBLUESTAR    SystemType = "BLUE_STAR"
	SystemTypeHYPERGIANT  SystemType = "HYPERGIANT"
	SystemTypeNEBULA      SystemType = "NEBULA"
	SystemTypeNEUTRONSTAR SystemType = "NEUTRON_STAR"
	SystemTypeORANGESTAR  SystemType = "ORANGE_STAR"
	SystemTypeREDSTAR     SystemType = "RED_STAR"
	SystemTypeUNSTABLE    SystemType = "UNSTABLE"
	SystemTypeWHITEDWARF  SystemType = "WHITE_DWARF"
	SystemTypeYOUNGSTAR   SystemType = "YOUNG_STAR"
)

// Defines values for TradeSymbol.
const (
	TradeSymbolADVANCEDCIRCUITRY       TradeSymbol = "ADVANCED_CIRCUITRY"
	TradeSymbolAIMAINFRAMES            TradeSymbol = "AI_MAINFRAMES"
	TradeSymbolALUMINUM                TradeSymbol = "ALUMINUM"
	TradeSymbolALUMINUMORE             TradeSymbol = "ALUMINUM_ORE"
	TradeSymbolAMMONIAICE              TradeSymbol = "AMMONIA_ICE"
	TradeSymbolAMMUNITION              TradeSymbol = "AMMUNITION"
	TradeSymbolANTIMATTER              TradeSymbol = "ANTIMATTER"
	TradeSymbolASSAULTRIFLES           TradeSymbol = "ASSAULT_RIFLES"
	TradeSymbolBIOCOMPOSITES           TradeSymbol = "BIOCOMPOSITES"
	TradeSymbolBOTANICALSPECIMENS      TradeSymbol = "BOTANICAL_SPECIMENS"
	TradeSymbolCLOTHING                TradeSymbol = "CLOTHING"
	TradeSymbolCOPPER                  TradeSymbol = "COPPER"
	TradeSymbolCOPPERORE               TradeSymbol = "COPPER_ORE"
	TradeSymbolCULTURALARTIFACTS       TradeSymbol = "CULTURAL_ARTIFACTS"
	TradeSymbolCYBERIMPLANTS           TradeSymbol = "CYBER_IMPLANTS"
	TradeSymbolDIAMONDS                TradeSymbol = "DIAMONDS"
	TradeSymbolDRUGS                   TradeSymbol = "DRUGS"
	TradeSymbolELECTRONICS             TradeSymbol = "ELECTRONICS"
	TradeSymbolENGINEHYPERDRIVEI       TradeSymbol = "ENGINE_HYPER_DRIVE_I"
	TradeSymbolENGINEIMPULSEDRIVEI     TradeSymbol = "ENGINE_IMPULSE_DRIVE_I"
	TradeSymbolENGINEIONDRIVEI         TradeSymbol = "ENGINE_ION_DRIVE_I"
	TradeSymbolENGINEIONDRIVEII        TradeSymbol = "ENGINE_ION_DRIVE_II"
	TradeSymbolEQUIPMENT               TradeSymbol = "EQUIPMENT"
	TradeSymbolEXOTICMATTER            TradeSymbol = "EXOTIC_MATTER"
	TradeSymbolEXPLOSIVES              TradeSymbol = "EXPLOSIVES"
	TradeSymbolFABRICS                 TradeSymbol = "FABRICS"
	TradeSymbolFERTILIZERS             TradeSymbol = "FERTILIZERS"
	TradeSymbolFIREARMS                TradeSymbol = "FIREARMS"
	TradeSymbolFOOD                    TradeSymbol = "FOOD"
	TradeSymbolFUEL                    TradeSymbol = "FUEL"
	TradeSymbolGENETHERAPEUTICS        TradeSymbol = "GENE_THERAPEUTICS"
	TradeSymbolGOLD                    TradeSymbol = "GOLD"
	TradeSymbolGOLDORE                 TradeSymbol = "GOLD_ORE"
	TradeSymbolGRAVITONEMITTERS        TradeSymbol = "GRAVITON_EMITTERS"
	TradeSymbolHOLOGRAPHICS            TradeSymbol = "HOLOGRAPHICS"
	TradeSymbolHYDROCARBON             TradeSymbol = "HYDROCARBON"
	TradeSymbolICEWATER                TradeSymbol = "ICE_WATER"
	TradeSymbolIRON                    TradeSymbol = "IRON"
	TradeSymbolIRONORE                 TradeSymbol = "IRON_ORE"
	TradeSymbolJEWELRY                 TradeSymbol = "JEWELRY"
	TradeSymbolLABINSTRUMENTS          TradeSymbol = "LAB_INSTRUMENTS"
	TradeSymbolLASERRIFLES             TradeSymbol = "LASER_RIFLES"
	TradeSymbolLIQUIDHYDROGEN          TradeSymbol = "LIQUID_HYDROGEN"
	TradeSymbolLIQUIDNITROGEN          TradeSymbol = "LIQUID_NITROGEN"
	TradeSymbolMACHINERY               TradeSymbol = "MACHINERY"
	TradeSymbolMEDICINE                TradeSymbol = "MEDICINE"
	TradeSymbolMERITIUM                TradeSymbol = "MERITIUM"
	TradeSymbolMERITIUMORE             TradeSymbol = "MERITIUM_ORE"
	TradeSymbolMICROFUSIONGENERATORS   TradeSymbol = "MICRO_FUSION_GENERATORS"
	TradeSymbolMICROPROCESSORS         TradeSymbol = "MICROPROCESSORS"
	TradeSymbolMILITARYEQUIPMENT       TradeSymbol = "MILITARY_EQUIPMENT"
	TradeSymbolMODULECARGOHOLDI        TradeSymbol = "MODULE_CARGO_HOLD_I"
	TradeSymbolMODULECREWQUARTERSI     TradeSymbol = "MODULE_CREW_QUARTERS_I"
	TradeSymbolMODULEENVOYQUARTERSI    TradeSymbol = "MODULE_ENVOY_QUARTERS_I"
	TradeSymbolMODULEFUELREFINERYI     TradeSymbol = "MODULE_FUEL_REFINERY_I"
	TradeSymbolMODULEJUMPDRIVEI        TradeSymbol = "MODULE_JUMP_DRIVE_I"
	TradeSymbolMODULEJUMPDRIVEII       TradeSymbol = "MODULE_JUMP_DRIVE_II"
	TradeSymbolMODULEJUMPDRIVEIII      TradeSymbol = "MODULE_JUMP_DRIVE_III"
	TradeSymbolMODULEMICROREFINERYI    TradeSymbol = "MODULE_MICRO_REFINERY_I"
	TradeSymbolMODULEMINERALPROCESSORI TradeSymbol = "MODULE_MINERAL_PROCESSOR_I"
	TradeSymbolMODULEOREREFINERYI      TradeSymbol = "MODULE_ORE_REFINERY_I"
	TradeSymbolMODULEPASSENGERCABINI   TradeSymbol = "MODULE_PASSENGER_CABIN_I"
	TradeSymbolMODULESCIENCELABI       TradeSymbol = "MODULE_SCIENCE_LAB_I"
	TradeSymbolMODULESHIELDGENERATORI  TradeSymbol = "MODULE_SHIELD_GENERATOR_I"
	TradeSymbolMODULESHIELDGENERATORII TradeSymbol = "MODULE_SHIELD_GENERATOR_II"
	TradeSymbolMODULEWARPDRIVEI        TradeSymbol = "MODULE_WARP_DRIVE_I"
	TradeSymbolMODULEWARPDRIVEII       TradeSymbol = "MODULE_WARP_DRIVE_II"
	TradeSymbolMODULEWARPDRIVEIII      TradeSymbol = "MODULE_WARP_DRIVE_III"
	TradeSymbolMOODREGULATORS          TradeSymbol = "MOOD_REGULATORS"
	TradeSymbolMOUNTGASSIPHONI         TradeSymbol = "MOUNT_GAS_SIPHON_I"
	TradeSymbolMOUNTGASSIPHONII        TradeSymbol = "MOUNT_GAS_SIPHON_II"
	TradeSymbolMOUNTGASSIPHONIII       TradeSymbol = "MOUNT_GAS_SIPHON_III"
	TradeSymbolMOUNTLASERCANNONI       TradeSymbol = "MOUNT_LASER_CANNON_I"
	TradeSymbolMOUNTMININGLASERI       TradeSymbol = "MOUNT_MINING_LASER_I"
	TradeSymbolMOUNTMININGLASERII      TradeSymbol = "MOUNT_MINING_LASER_II"
	TradeSymbolMOUNTMININGLASERIII     TradeSymbol = "MOUNT_MINING_LASER_III"
	TradeSymbolMOUNTMISSILELAUNCHERI   TradeSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	TradeSymbolMOUNTSENSORARRAYI       TradeSymbol = "MOUNT_SENSOR_ARRAY_I"
	TradeSymbolMOUNTSENSORARRAYII      TradeSymbol = "MOUNT_SENSOR_ARRAY_II"
	TradeSymbolMOUNTSENSORARRAYIII     TradeSymbol = "MOUNT_SENSOR_ARRAY_III"
	TradeSymbolMOUNTSURVEYORI          TradeSymbol = "MOUNT_SURVEYOR_I"
	TradeSymbolMOUNTSURVEYORII         TradeSymbol = "MOUNT_SURVEYOR_II"
	TradeSymbolMOUNTSURVEYORIII        TradeSymbol = "MOUNT_SURVEYOR_III"
	TradeSymbolMOUNTTURRETI            TradeSymbol = "MOUNT_TURRET_I"
	TradeSymbolNANOBOTS                TradeSymbol = "NANOBOTS"
	TradeSymbolNEURALCHIPS             TradeSymbol = "NEURAL_CHIPS"
	TradeSymbolNOVELLIFEFORMS          TradeSymbol = "NOVEL_LIFEFORMS"
	TradeSymbolPLASTICS                TradeSymbol = "PLASTICS"
	TradeSymbolPLATINUM                TradeSymbol = "PLATINUM"
	TradeSymbolPLATINUMORE             TradeSymbol = "PLATINUM_ORE"
	TradeSymbolPOLYNUCLEOTIDES         TradeSymbol = "POLYNUCLEOTIDES"
	TradeSymbolPRECIOUSSTONES          TradeSymbol = "PRECIOUS_STONES"
	TradeSymbolQUANTUMDRIVES           TradeSymbol = "QUANTUM_DRIVES"
	TradeSymbolQUARTZSAND              TradeSymbol = "QUARTZ_SAND"
	TradeSymbolREACTORANTIMATTERI      TradeSymbol = "REACTOR_ANTIMATTER_I"
	TradeSymbolREACTORCHEMICALI        TradeSymbol = "REACTOR_CHEMICAL_I"
	TradeSymbolREACTORFISSIONI         TradeSymbol = "REACTOR_FISSION_I"
	TradeSymbolREACTORFUSIONI          TradeSymbol = "REACTOR_FUSION_I"
	TradeSymbolREACTORSOLARI           TradeSymbol = "REACTOR_SOLAR_I"
	TradeSymbolRELICTECH               TradeSymbol = "RELIC_TECH"
	TradeSymbolROBOTICDRONES           TradeSymbol = "ROBOTIC_DRONES"
	TradeSymbolSHIPPLATING             TradeSymbol = "SHIP_PLATING"
	TradeSymbolSHIPSALVAGE             TradeSymbol = "SHIP_SALVAGE"
	TradeSymbolSILICONCRYSTALS         TradeSymbol = "SILICON_CRYSTALS"
	TradeSymbolSILVER                  TradeSymbol = "SILVER"
	TradeSymbolSILVERORE               TradeSymbol = "SILVER_ORE"
	TradeSymbolSUPERGRAINS             TradeSymbol = "SUPERGRAINS"
	TradeSymbolURANITE                 TradeSymbol = "URANITE"
	TradeSymbolURANITEORE              TradeSymbol = "URANITE_ORE"
	TradeSymbolVIRALAGENTS             TradeSymbol = "VIRAL_AGENTS"
)

// Defines values for WaypointTraitSymbol.
const (
	WaypointTraitSymbolASHCLOUDS             WaypointTraitSymbol = "ASH_CLOUDS"
	WaypointTraitSymbolBARREN                WaypointTraitSymbol = "BARREN"
	WaypointTraitSymbolBLACKMARKET           WaypointTraitSymbol = "BLACK_MARKET"
	WaypointTraitSymbolBREATHABLEATMOSPHERE  WaypointTraitSymbol = "BREATHABLE_ATMOSPHERE"
	WaypointTraitSymbolBUREAUCRATIC          WaypointTraitSymbol = "BUREAUCRATIC"
	WaypointTraitSymbolCANYONS               WaypointTraitSymbol = "CANYONS"
	WaypointTraitSymbolCOMMONMETALDEPOSITS   WaypointTraitSymbol = "COMMON_METAL_DEPOSITS"
	WaypointTraitSymbolCORROSIVEATMOSPHERE   WaypointTraitSymbol = "CORROSIVE_ATMOSPHERE"
	WaypointTraitSymbolCORRUPT               WaypointTraitSymbol = "CORRUPT"
	WaypointTraitSymbolCRUSHINGGRAVITY       WaypointTraitSymbol = "CRUSHING_GRAVITY"
	WaypointTraitSymbolDIVERSELIFE           WaypointTraitSymbol = "DIVERSE_LIFE"
	WaypointTraitSymbolDRYSEABEDS            WaypointTraitSymbol = "DRY_SEABEDS"
	WaypointTraitSymbolEXPLORATIONOUTPOST    WaypointTraitSymbol = "EXPLORATION_OUTPOST"
	WaypointTraitSymbolEXPLOSIVEGASES        WaypointTraitSymbol = "EXPLOSIVE_GASES"
	WaypointTraitSymbolEXTREMEPRESSURE       WaypointTraitSymbol = "EXTREME_PRESSURE"
	WaypointTraitSymbolEXTREMETEMPERATURES   WaypointTraitSymbol = "EXTREME_TEMPERATURES"
	WaypointTraitSymbolFOSSILS               WaypointTraitSymbol = "FOSSILS"
	WaypointTraitSymbolFROZEN                WaypointTraitSymbol = "FROZEN"
	WaypointTraitSymbolHIGHTECH              WaypointTraitSymbol = "HIGH_TECH"
	WaypointTraitSymbolICECRYSTALS           WaypointTraitSymbol = "ICE_CRYSTALS"
	WaypointTraitSymbolINDUSTRIAL            WaypointTraitSymbol = "INDUSTRIAL"
	WaypointTraitSymbolJOVIAN                WaypointTraitSymbol = "JOVIAN"
	WaypointTraitSymbolJUNGLE                WaypointTraitSymbol = "JUNGLE"
	WaypointTraitSymbolMAGMASEAS             WaypointTraitSymbol = "MAGMA_SEAS"
	WaypointTraitSymbolMARKETPLACE           WaypointTraitSymbol = "MARKETPLACE"
	WaypointTraitSymbolMEGASTRUCTURES        WaypointTraitSymbol = "MEGA_STRUCTURES"
	WaypointTraitSymbolMETHANEPOOLS          WaypointTraitSymbol = "METHANE_POOLS"
	WaypointTraitSymbolMILITARYBASE          WaypointTraitSymbol = "MILITARY_BASE"
	WaypointTraitSymbolMINERALDEPOSITS       WaypointTraitSymbol = "MINERAL_DEPOSITS"
	WaypointTraitSymbolMUTATEDFLORA          WaypointTraitSymbol = "MUTATED_FLORA"
	WaypointTraitSymbolOCEAN                 WaypointTraitSymbol = "OCEAN"
	WaypointTraitSymbolOUTPOST               WaypointTraitSymbol = "OUTPOST"
	WaypointTraitSymbolOVERCROWDED           WaypointTraitSymbol = "OVERCROWDED"
	WaypointTraitSymbolPERPETUALDAYLIGHT     WaypointTraitSymbol = "PERPETUAL_DAYLIGHT"
	WaypointTraitSymbolPERPETUALOVERCAST     WaypointTraitSymbol = "PERPETUAL_OVERCAST"
	WaypointTraitSymbolPRECIOUSMETALDEPOSITS WaypointTraitSymbol = "PRECIOUS_METAL_DEPOSITS"
	WaypointTraitSymbolRAREMETALDEPOSITS     WaypointTraitSymbol = "RARE_METAL_DEPOSITS"
	WaypointTraitSymbolRESEARCHFACILITY      WaypointTraitSymbol = "RESEARCH_FACILITY"
	WaypointTraitSymbolROCKY                 WaypointTraitSymbol = "ROCKY"
	WaypointTraitSymbolSALTFLATS             WaypointTraitSymbol = "SALT_FLATS"
	WaypointTraitSymbolSCARCELIFE            WaypointTraitSymbol = "SCARCE_LIFE"
	WaypointTraitSymbolSCATTEREDSETTLEMENTS  WaypointTraitSymbol = "SCATTERED_SETTLEMENTS"
	WaypointTraitSymbolSHIPYARD              WaypointTraitSymbol = "SHIPYARD"
	WaypointTraitSymbolSPRAWLINGCITIES       WaypointTraitSymbol = "SPRAWLING_CITIES"
	WaypointTraitSymbolSTRIPPED              WaypointTraitSymbol = "STRIPPED"
	WaypointTraitSymbolSTRONGGRAVITY         WaypointTraitSymbol = "STRONG_GRAVITY"
	WaypointTraitSymbolSTRONGMAGNETOSPHERE   WaypointTraitSymbol = "STRONG_MAGNETOSPHERE"
	WaypointTraitSymbolSUPERVOLCANOES        WaypointTraitSymbol = "SUPERVOLCANOES"
	WaypointTraitSymbolSURVEILLANCEOUTPOST   WaypointTraitSymbol = "SURVEILLANCE_OUTPOST"
	WaypointTraitSymbolSWAMP                 WaypointTraitSymbol = "SWAMP"
	WaypointTraitSymbolTEMPERATE             WaypointTraitSymbol = "TEMPERATE"
	WaypointTraitSymbolTERRAFORMED           WaypointTraitSymbol = "TERRAFORMED"
	WaypointTraitSymbolTOXICATMOSPHERE       WaypointTraitSymbol = "TOXIC_ATMOSPHERE"
	WaypointTraitSymbolTRADINGHUB            WaypointTraitSymbol = "TRADING_HUB"
	WaypointTraitSymbolUNCHARTED             WaypointTraitSymbol = "UNCHARTED"
	WaypointTraitSymbolVASTRUINS             WaypointTraitSymbol = "VAST_RUINS"
	WaypointTraitSymbolVIBRANTAURORAS        WaypointTraitSymbol = "VIBRANT_AURORAS"
	WaypointTraitSymbolVOLCANIC              WaypointTraitSymbol = "VOLCANIC"
	WaypointTraitSymbolWEAKGRAVITY           WaypointTraitSymbol = "WEAK_GRAVITY"
)

// Defines values for WaypointType.
const (
	WaypointTypeASTEROIDFIELD  WaypointType = "ASTEROID_FIELD"
	WaypointTypeDEBRISFIELD    WaypointType = "DEBRIS_FIELD"
	WaypointTypeGASGIANT       WaypointType = "GAS_GIANT"
	WaypointTypeGRAVITYWELL    WaypointType = "GRAVITY_WELL"
	WaypointTypeJUMPGATE       WaypointType = "JUMP_GATE"
	WaypointTypeMOON           WaypointType = "MOON"
	WaypointTypeNEBULA         WaypointType = "NEBULA"
	WaypointTypeORBITALSTATION WaypointType = "ORBITAL_STATION"
	WaypointTypePLANET         WaypointType = "PLANET"
)

// Defines values for ShipRefineJSONBodyProduce.
const (
	ALUMINUM ShipRefineJSONBodyProduce = "ALUMINUM"
	COPPER   ShipRefineJSONBodyProduce = "COPPER"
	FUEL     ShipRefineJSONBodyProduce = "FUEL"
	GOLD     ShipRefineJSONBodyProduce = "GOLD"
	IRON     ShipRefineJSONBodyProduce = "IRON"
	MERITIUM ShipRefineJSONBodyProduce = "MERITIUM"
	PLATINUM ShipRefineJSONBodyProduce = "PLATINUM"
	SILVER   ShipRefineJSONBodyProduce = "SILVER"
	URANITE  ShipRefineJSONBodyProduce = "URANITE"
)

// Agent defines model for Agent.
type Agent struct {
	AccountId string `json:"accountId"`

	// Credits The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
	Credits int `json:"credits"`

	// Headquarters The headquarters of the agent.
	Headquarters string `json:"headquarters"`
	Symbol       string `json:"symbol"`
}

// Chart The chart of a system or waypoint, which makes the location visible to other agents.
type Chart struct {
	SubmittedBy    *string    `json:"submittedBy,omitempty"`
	SubmittedOn    *time.Time `json:"submittedOn,omitempty"`
	WaypointSymbol *string    `json:"waypointSymbol,omitempty"`
}

// ConnectedSystem defines model for ConnectedSystem.
type ConnectedSystem struct {
	Distance int `json:"distance"`

	// FactionSymbol The symbol of the faction that owns the connected jump gate in the system.
	FactionSymbol *string `json:"factionSymbol,omitempty"`
	SectorSymbol  string  `json:"sectorSymbol"`
	Symbol        string  `json:"symbol"`

	// Type The type of waypoint.
	Type SystemType `json:"type"`
	X    int        `json:"x"`
	Y    int        `json:"y"`
}

// Contract defines model for Contract.
type Contract struct {
	// Accepted Whether the contract has been accepted by the agent
	Accepted bool `json:"accepted"`

	// Expiration The time at which the contract expires
	Expiration time.Time `json:"expiration"`

	// FactionSymbol The symbol of the faction that this contract is for.
	FactionSymbol string `json:"factionSymbol"`

	// Fulfilled Whether the contract has been fulfilled
	Fulfilled bool          `json:"fulfilled"`
	Id        string        `json:"id"`
	Terms     ContractTerms `json:"terms"`
	Type      ContractType  `json:"type"`
}

// ContractType defines model for Contract.Type.
type ContractType string

// ContractDeliverGood The details of a delivery contract. Includes the type of good, units needed, and the destination.
type ContractDeliverGood struct {
	// DestinationSymbol The destination where goods need to be delivered.
	DestinationSymbol string `json:"destinationSymbol"`

	// TradeSymbol The symbol of the trade good to deliver.
	TradeSymbol string `json:"tradeSymbol"`

	// UnitsFulfilled The number of units fulfilled on this contract.
	UnitsFulfilled int `json:"unitsFulfilled"`

	// UnitsRequired The number of units that need to be delivered on this contract.
	UnitsRequired int `json:"unitsRequired"`
}

// ContractPayment defines model for ContractPayment.
type ContractPayment struct {
	// OnAccepted The amount of credits received up front for accepting the contract.
	OnAccepted int `json:"onAccepted"`

	// OnFulfilled The amount of credits received when the contract is fulfilled.
	OnFulfilled int `json:"onFulfilled"`
}

// ContractTerms defines model for ContractTerms.
type ContractTerms struct {
	// Deadline The deadline for the contract.
	Deadline time.Time              `json:"deadline"`
	Deliver  *[]ContractDeliverGood `json:"deliver,omitempty"`
	Payment  ContractPayment        `json:"payment"`
}

// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
type Cooldown struct {
	// Expiration The date and time when the cooldown expires in ISO 8601 format
	Expiration time.Time `json:"expiration"`

	// RemainingSeconds The remaining duration of the cooldown in seconds
	RemainingSeconds int `json:"remainingSeconds"`

	// ShipSymbol The symbol of the ship that is on cooldown
	ShipSymbol string `json:"shipSymbol"`

	// TotalSeconds The total duration of the cooldown in seconds
	TotalSeconds int `json:"totalSeconds"`
}

// Extraction defines model for Extraction.
type Extraction struct {
	ShipSymbol string          `json:"shipSymbol"`
	Yield      ExtractionYield `json:"yield"`
}

// ExtractionYield defines model for ExtractionYield.
type ExtractionYield struct {
	Symbol string `json:"symbol"`

	// Units The number of units extracted that were placed into the ship's cargo hold.
	Units int `json:"units"`
}

// Faction defines model for Faction.
type Faction struct {
	Description  string         `json:"description"`
	Headquarters string         `json:"headquarters"`
	Name         string         `json:"name"`
	Symbol       string         `json:"symbol"`
	Traits       []FactionTrait `json:"traits"`
}

// FactionTrait defines model for FactionTrait.
type FactionTrait struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the trait.
	Symbol FactionTraitSymbol `json:"symbol"`
}

// FactionTraitSymbol The unique identifier of the trait.
type FactionTraitSymbol string

// JumpGate defines model for JumpGate.
type JumpGate struct {
	// ConnectedSystems The systems within range of the gate that have a corresponding gate.
	ConnectedSystems []ConnectedSystem `json:"connectedSystems"`

	// FactionSymbol The symbol of the faction that owns the gate.
	FactionSymbol *string `json:"factionSymbol,omitempty"`

	// JumpRange The maximum jump range of the gate.
	JumpRange float32 `json:"jumpRange"`
}

// Market defines model for Market.
type Market struct {
	// Exchange The list of goods that are bought and sold between agents at this market.
	Exchange []TradeGood `json:"exchange"`

	// Exports The list of goods that are exported from this market.
	Exports []TradeGood `json:"exports"`

	// Imports The list of goods that are sought as imports in this market.
	Imports []TradeGood `json:"imports"`

	// Symbol The symbol of the market. The symbol is the same as the waypoint where the market is located.
	Symbol string `json:"symbol"`

	// TradeGoods The list of goods that are traded at this market. Visible only when a ship is present at the market.
	TradeGoods *[]MarketTradeGood `json:"tradeGoods,omitempty"`

	// Transactions The list of recent transactions at this market. Visible only when a ship is present at the market.
	Transactions *[]MarketTransaction `json:"transactions,omitempty"`
}

// MarketTradeGood defines model for MarketTradeGood.
type MarketTradeGood struct {
	// PurchasePrice The price at which this good can be purchased from the market.
	PurchasePrice int `json:"purchasePrice"`

	// SellPrice The price at which this good can be sold to the market.
	SellPrice int `json:"sellPrice"`

	// Supply A rough estimate of the total supply of this good in the marketplace.
	Supply MarketTradeGoodSupply `json:"supply"`

	// Symbol The symbol of the trade good.
	Symbol string `json:"symbol"`

	// TradeVolume The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.
	TradeVolume int `json:"tradeVolume"`
}

// MarketTradeGoodSupply A rough estimate of the total supply of this good in the marketplace.
type MarketTradeGoodSupply string

// MarketTransaction defines model for MarketTransaction.
type MarketTransaction struct {
	// PricePerUnit The price per unit of the transaction.
	PricePerUnit int `json:"pricePerUnit"`

	// ShipSymbol The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// TotalPrice The total price of the transaction.
	TotalPrice int `json:"totalPrice"`

	// TradeSymbol The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`

	// Type The type of transaction.
	Type MarketTransactionType `json:"type"`

	// Units The number of units of the transaction.
	Units int `json:"units"`

	// WaypointSymbol The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
}

// MarketTransactionType The type of transaction.
type MarketTransactionType string

// Meta defines model for Meta.
type Meta struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
	Total int `json:"total"`
}

// ScannedShip The ship that was scanned. Details include information about the ship that could be detected by the scanner.
type ScannedShip struct {
	// Engine The engine of the ship.
	Engine struct {
		Symbol string `json:"symbol"`
	} `json:"engine"`

	// Frame The frame of the ship.
	Frame *struct {
		Symbol string `json:"symbol"`
	} `json:"frame,omitempty"`
	Mounts *[]struct {
		Symbol string `json:"symbol"`
	} `json:"mounts,omitempty"`

	// Nav The navigation information of the ship.
	Nav ShipNav `json:"nav"`

	// Reactor The reactor of the ship.
	Reactor *struct {
		Symbol string `json:"symbol"`
	} `json:"reactor,omitempty"`

	// Registration The public registration information of the ship
	Registration ShipRegistration `json:"registration"`

	// Symbol The globally unique identifier of the ship.
	Symbol string `json:"symbol"`
}

// ScannedSystem defines model for ScannedSystem.
type ScannedSystem struct {
	Distance     int    `json:"distance"`
	SectorSymbol string `json:"sectorSymbol"`
	Symbol       string `json:"symbol"`

	// Type The type of waypoint.
	Type SystemType `json:"type"`
	X    int        `json:"x"`
	Y    int        `json:"y"`
}

// ScannedWaypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
type ScannedWaypoint struct {
	// Chart The chart of a system or waypoint, which makes the location visible to other agents.
	Chart        *Chart            `json:"chart,omitempty"`
	Faction      *WaypointFaction  `json:"faction,omitempty"`
	Orbitals     []WaypointOrbital `json:"orbitals"`
	Symbol       string            `json:"symbol"`
	SystemSymbol string            `json:"systemSymbol"`

	// Traits The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// Ship A ship
type Ship struct {
	Cargo ShipCargo `json:"cargo"`

	// Crew The ship's crew service and maintain the ship's systems and equipment.
	Crew ShipCrew `json:"crew"`

	// Engine The engine determines how quickly a ship travels between waypoints.
	Engine ShipEngine `json:"engine"`

	// Frame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame ShipFrame `json:"frame"`

	// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
	Fuel    ShipFuel     `json:"fuel"`
	Modules []ShipModule `json:"modules"`
	Mounts  []ShipMount  `json:"mounts"`

	// Nav The navigation information of the ship.
	Nav ShipNav `json:"nav"`

	// Reactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor ShipReactor `json:"reactor"`

	// Registration The public registration information of the ship
	Registration ShipRegistration `json:"registration"`

	// Symbol The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]`
	Symbol string `json:"symbol"`
}

// ShipCargo defines model for ShipCargo.
type ShipCargo struct {
	// Capacity The max number of items that can be stored in the cargo hold.
	Capacity int `json:"capacity"`

	// Inventory The items currently in the cargo hold.
	Inventory []ShipCargoItem `json:"inventory"`

	// Units The number of items currently stored in the cargo hold.
	Units int `json:"units"`
}

// ShipCargoItem The type of cargo item and the number of units.
type ShipCargoItem struct {
	// Description The description of the cargo item type.
	Description string `json:"description"`

	// Name The name of the cargo item type.
	Name string `json:"name"`

	// Symbol The unique identifier of the cargo item type.
	Symbol string `json:"symbol"`

	// Units The number of units of the cargo item.
	Units int `json:"units"`
}

// ShipCondition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
type ShipCondition = int

// ShipCrew The ship's crew service and maintain the ship's systems and equipment.
type ShipCrew struct {
	// Capacity The maximum number of crew members the ship can support.
	Capacity int `json:"capacity"`

	// Current The current number of crew members on the ship.
	Current int `json:"current"`

	// Morale A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
	Morale int `json:"morale"`

	// Required The minimum number of crew members required to maintain the ship.
	Required int `json:"required"`

	// Rotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
	Rotation ShipCrewRotation `json:"rotation"`

	// Wages The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
	Wages int `json:"wages"`
}

// ShipCrewRotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
type ShipCrewRotation string

// ShipEngine The engine determines how quickly a ship travels between waypoints.
type ShipEngine struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition   *ShipCondition `json:"condition,omitempty"`
	Description string         `json:"description"`
	Name        string         `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Speed        float32          `json:"speed"`
	Symbol       ShipEngineSymbol `json:"symbol"`
}

// ShipEngineSymbol defines model for ShipEngine.Symbol.
type ShipEngineSymbol string

// ShipFrame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
type ShipFrame struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition      *ShipCondition `json:"condition,omitempty"`
	Description    string         `json:"description"`
	FuelCapacity   int            `json:"fuelCapacity"`
	ModuleSlots    int            `json:"moduleSlots"`
	MountingPoints int            `json:"mountingPoints"`
	Name           string         `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Symbol       ShipFrameSymbol  `json:"symbol"`
}

// ShipFrameSymbol defines model for ShipFrame.Symbol.
type ShipFrameSymbol string

// ShipFuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
type ShipFuel struct {
	// Capacity The maximum amount of fuel the ship's tanks can hold.
	Capacity int `json:"capacity"`
	Consumed *struct {
		// Amount The amount of fuel consumed by the most recent transit or action.
		Amount int `json:"amount"`

		// Timestamp The time at which the fuel was consumed.
		Timestamp time.Time `json:"timestamp"`
	} `json:"consumed,omitempty"`

	// Current The current amount of fuel in the ship's tanks.
	Current int `json:"current"`
}

// ShipModule A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
type ShipModule struct {
	Capacity    *int    `json:"capacity,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Range       *int    `json:"range,omitempty"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Symbol       ShipModuleSymbol `json:"symbol"`
}

// ShipModuleSymbol defines model for ShipModule.Symbol.
type ShipModuleSymbol string

// ShipMount A mount is installed on the exterier of a ship.
type ShipMount struct {
	Deposits    *[]ShipMountDeposits `json:"deposits,omitempty"`
	Description *string              `json:"description,omitempty"`
	Name        string               `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Strength     *int             `json:"strength,omitempty"`
	Symbol       ShipMountSymbol  `json:"symbol"`
}

// ShipMountDeposits defines model for ShipMount.Deposits.
type ShipMountDeposits string

// ShipMountSymbol defines model for ShipMount.Symbol.
type ShipMountSymbol string

// ShipNav The navigation information of the ship.
type ShipNav struct {
	// FlightMode The ship's set speed when traveling between waypoints or systems.
	FlightMode ShipNavFlightMode `json:"flightMode"`

	// Route The routing information for the ship's most recent transit or current location.
	Route ShipNavRoute `json:"route"`

	// Status The current status of the ship
	Status ShipNavStatus `json:"status"`

	// SystemSymbol The system symbol of the ship's current location.
	SystemSymbol string `json:"systemSymbol"`

	// WaypointSymbol The waypoint symbol of the ship's current location, or if the ship is in-transit, the waypoint symbol of the ship's destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// ShipNavFlightMode The ship's set speed when traveling between waypoints or systems.
type ShipNavFlightMode string

// ShipNavRoute The routing information for the ship's most recent transit or current location.
type ShipNavRoute struct {
	// Arrival The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.
	Arrival time.Time `json:"arrival"`

	// Departure The destination or departure of a ships nav route.
	Departure ShipNavRouteWaypoint `json:"departure"`

	// DepartureTime The date time of the ship's departure.
	DepartureTime time.Time `json:"departureTime"`

	// Destination The destination or departure of a ships nav route.
	Destination ShipNavRouteWaypoint `json:"destination"`
}

// ShipNavRouteWaypoint The destination or departure of a ships nav route.
type ShipNavRouteWaypoint struct {
	Symbol       string `json:"symbol"`
	SystemSymbol string `json:"systemSymbol"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// ShipNavStatus The current status of the ship
type ShipNavStatus string

// ShipReactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
type ShipReactor struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition   *ShipCondition `json:"condition,omitempty"`
	Description string         `json:"description"`
	Name        string         `json:"name"`
	PowerOutput int            `json:"powerOutput"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements  `json:"requirements"`
	Symbol       ShipReactorSymbol `json:"symbol"`
}

// ShipReactorSymbol defines model for ShipReactor.Symbol.
type ShipReactorSymbol string

// ShipRegistration The public registration information of the ship
type ShipRegistration struct {
	// FactionSymbol The symbol of the faction the ship is registered with
	FactionSymbol string `json:"factionSymbol"`

	// Name The agent's registered name of the ship
	Name string `json:"name"`

	// Role The registered role of the ship
	Role ShipRole `json:"role"`
}

// ShipRequirements The requirements for installation on a ship
type ShipRequirements struct {
	// Crew The number of crew required for operation.
	Crew *int `json:"crew,omitempty"`

	// Power The amount of power required from the reactor.
	Power *int `json:"power,omitempty"`

	// Slots The number of module slots required for installation.
	Slots *int `json:"slots,omitempty"`
}

// ShipRole The registered role of the ship
type ShipRole string

// ShipType defines model for ShipType.
type ShipType string

// Shipyard defines model for Shipyard.
type Shipyard struct {
	// ShipTypes The list of ship types available for purchase at this shipyard.
	ShipTypes []struct {
		Type *ShipType `json:"type,omitempty"`
	} `json:"shipTypes"`

	// Ships The ships that are currently available for purchase at the shipyard.
	Ships *[]ShipyardShip `json:"ships,omitempty"`

	// Symbol The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
	Symbol string `json:"symbol"`

	// Transactions The list of recent transactions at this shipyard.
	Transactions *[]ShipyardTransaction `json:"transactions,omitempty"`
}

// ShipyardShip defines model for ShipyardShip.
type ShipyardShip struct {
	Description string `json:"description"`

	// Engine The engine determines how quickly a ship travels between waypoints.
	Engine ShipEngine `json:"engine"`

	// Frame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame         ShipFrame    `json:"frame"`
	Modules       []ShipModule `json:"modules"`
	Mounts        []ShipMount  `json:"mounts"`
	Name          string       `json:"name"`
	PurchasePrice int          `json:"purchasePrice"`

	// Reactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor ShipReactor `json:"reactor"`
	Type    *ShipType   `json:"type,omitempty"`
}

// ShipyardTransaction defines model for ShipyardTransaction.
type ShipyardTransaction struct {
	// AgentSymbol The symbol of the agent that made the transaction.
	AgentSymbol string `json:"agentSymbol"`

	// Price The price of the transaction.
	Price int `json:"price"`

	// ShipSymbol The symbol of the ship that was purchased.
	ShipSymbol string `json:"shipSymbol"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// WaypointSymbol The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
}

// Survey A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
type Survey struct {
	// Deposits A list of deposits that can be found at this location.
	Deposits []SurveyDeposit `json:"deposits"`

	// Expiration The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
	Expiration time.Time `json:"expiration"`

	// Signature A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
	Signature string `json:"signature"`

	// Size The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
	Size SurveySize `json:"size"`

	// Symbol The symbol of the waypoint that this survey is for.
	Symbol string `json:"symbol"`
}

// SurveySize The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
type SurveySize string

// SurveyDeposit A surveyed deposit of a mineral or resource available for extraction.
type SurveyDeposit struct {
	// Symbol The symbol of the deposit.
	Symbol string `json:"symbol"`
}

// System defines model for System.
type System struct {
	Factions     []SystemFaction `json:"factions"`
	SectorSymbol string          `json:"sectorSymbol"`
	Symbol       string          `json:"symbol"`

	// Type The type of waypoint.
	Type      SystemType       `json:"type"`
	Waypoints []SystemWaypoint `json:"waypoints"`
	X         int              `json:"x"`
	Y         int              `json:"y"`
}

// SystemFaction defines model for SystemFaction.
type SystemFaction struct {
	Symbol string `json:"symbol"`
}

// SystemType The type of waypoint.
type SystemType string

// SystemWaypoint defines model for SystemWaypoint.
type SystemWaypoint struct {
	Symbol string `json:"symbol"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// TradeGood defines model for TradeGood.
type TradeGood struct {
	Description string      `json:"description"`
	Name        string      `json:"name"`
	Symbol      TradeSymbol `json:"symbol"`
}

// TradeSymbol defines model for TradeSymbol.
type TradeSymbol string

// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
type Waypoint struct {
	// Chart The chart of a system or waypoint, which makes the location visible to other agents.
	Chart        *Chart            `json:"chart,omitempty"`
	Faction      *WaypointFaction  `json:"faction,omitempty"`
	Orbitals     []WaypointOrbital `json:"orbitals"`
	Symbol       string            `json:"symbol"`
	SystemSymbol string            `json:"systemSymbol"`

	// Traits The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// WaypointFaction defines model for WaypointFaction.
type WaypointFaction struct {
	Symbol string `json:"symbol"`
}

// WaypointOrbital An orbital is another waypoint that orbits a parent waypoint.
type WaypointOrbital struct {
	Symbol string `json:"symbol"`
}

// WaypointTrait defines model for WaypointTrait.
type WaypointTrait struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the trait.
	Symbol WaypointTraitSymbol `json:"symbol"`
}

// WaypointTraitSymbol The unique identifier of the trait.
type WaypointTraitSymbol string

// WaypointType The type of waypoint.
type WaypointType string

// GetFactionsParams defines parameters for GetFactions.
type GetFactionsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetContractsParams defines parameters for GetContracts.
type GetContractsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeliverContractJSONBody defines parameters for DeliverContract.
type DeliverContractJSONBody struct {
	ShipSymbol  string `json:"shipSymbol"`
	TradeSymbol string `json:"tradeSymbol"`
	Units       int    `json:"units"`
}

// GetMyShipsParams defines parameters for GetMyShips.
type GetMyShipsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PurchaseShipJSONBody defines parameters for PurchaseShip.
type PurchaseShipJSONBody struct {
	ShipType ShipType `json:"shipType"`

	// WaypointSymbol The symbol of the waypoint you want to purchase the ship at.
	WaypointSymbol string `json:"waypointSymbol"`
}

// ExtractResourcesJSONBody defines parameters for ExtractResources.
type ExtractResourcesJSONBody struct {
	// Survey A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
	Survey *Survey `json:"survey,omitempty"`
}

// JettisonJSONBody defines parameters for Jettison.
type JettisonJSONBody struct {
	Symbol string `json:"symbol"`
	Units  int    `json:"units"`
}

// JumpShipJSONBody defines parameters for JumpShip.
type JumpShipJSONBody struct {
	// SystemSymbol The system symbol to jump to.
	SystemSymbol string `json:"systemSymbol"`
}

// PatchShipNavJSONBody defines parameters for PatchShipNav.
type PatchShipNavJSONBody struct {
	// FlightMode The ship's set speed when traveling between waypoints or systems.
	FlightMode *ShipNavFlightMode `json:"flightMode,omitempty"`
}

// NavigateShipJSONBody defines parameters for NavigateShip.
type NavigateShipJSONBody struct {
	// WaypointSymbol The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// PurchaseCargoJSONBody defines parameters for PurchaseCargo.
type PurchaseCargoJSONBody struct {
	Symbol string `json:"symbol"`
	Units  int    `json:"units"`
}

// ShipRefineJSONBody defines parameters for ShipRefine.
type ShipRefineJSONBody struct {
	Produce ShipRefineJSONBodyProduce `json:"produce"`
}

// ShipRefineJSONBodyProduce defines parameters for ShipRefine.
type ShipRefineJSONBodyProduce string

// SellCargoJSONBody defines parameters for SellCargo.
type SellCargoJSONBody struct {
	Symbol string `json:"symbol"`
	Units  int    `json:"units"`
}

// TransferCargoJSONBody defines parameters for TransferCargo.
type TransferCargoJSONBody struct {
	ShipSymbol  string `json:"shipSymbol"`
	TradeSymbol string `json:"tradeSymbol"`
	Units       int    `json:"units"`
}

// WarpShipJSONBody defines parameters for WarpShip.
type WarpShipJSONBody struct {
	// WaypointSymbol The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	// Email Your email address. This is used if you reserved your call sign between resets.
	Email *string `json:"email,omitempty"`

	// Faction The faction you choose determines your headquarters.
	Faction *string `json:"faction,omitempty"`

	// Symbol How other agents will see your ships and information.
	Symbol string `json:"symbol"`
}

// GetSystemsParams defines parameters for GetSystems.
type GetSystemsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSystemWaypointsParams defines parameters for GetSystemWaypoints.
type GetSystemWaypointsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeliverContractJSONRequestBody defines body for DeliverContract for application/json ContentType.
type DeliverContractJSONRequestBody DeliverContractJSONBody

// PurchaseShipJSONRequestBody defines body for PurchaseShip for application/json ContentType.
type PurchaseShipJSONRequestBody PurchaseShipJSONBody

// ExtractResourcesJSONRequestBody defines body for ExtractResources for application/json ContentType.
type ExtractResourcesJSONRequestBody ExtractResourcesJSONBody

// JettisonJSONRequestBody defines body for Jettison for application/json ContentType.
type JettisonJSONRequestBody JettisonJSONBody

// JumpShipJSONRequestBody defines body for JumpShip for application/json ContentType.
type JumpShipJSONRequestBody JumpShipJSONBody

// PatchShipNavJSONRequestBody defines body for PatchShipNav for application/json ContentType.
type PatchShipNavJSONRequestBody PatchShipNavJSONBody

// NavigateShipJSONRequestBody defines body for NavigateShip for application/json ContentType.
type NavigateShipJSONRequestBody NavigateShipJSONBody

// PurchaseCargoJSONRequestBody defines body for PurchaseCargo for application/json ContentType.
type PurchaseCargoJSONRequestBody PurchaseCargoJSONBody

// ShipRefineJSONRequestBody defines body for ShipRefine for application/json ContentType.
type ShipRefineJSONRequestBody ShipRefineJSONBody

// SellCargoJSONRequestBody defines body for SellCargo for application/json ContentType.
type SellCargoJSONRequestBody SellCargoJSONBody

// TransferCargoJSONRequestBody defines body for TransferCargo for application/json ContentType.
type TransferCargoJSONRequestBody TransferCargoJSONBody

// WarpShipJSONRequestBody defines body for WarpShip for application/json ContentType.
type WarpShipJSONRequestBody WarpShipJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFactions request
	GetFactions(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFaction request
	GetFaction(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyAgent request
	GetMyAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracts request
	GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContract request
	GetContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptContract request
	AcceptContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeliverContract request with any body
	DeliverContractWithBody(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeliverContract(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FulfillContract request
	FulfillContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShips request
	GetMyShips(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseShip request with any body
	PurchaseShipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseShip(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShip request
	GetMyShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShipCargo request
	GetMyShipCargo(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChart request
	CreateChart(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipCooldown request
	GetShipCooldown(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DockShip request
	DockShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtractResources request with any body
	ExtractResourcesWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtractResources(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Jettison request with any body
	JettisonWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Jettison(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JumpShip request with any body
	JumpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JumpShip(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipNav request
	GetShipNav(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchShipNav request with any body
	PatchShipNavWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchShipNav(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NavigateShip request with any body
	NavigateShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NavigateShip(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrbitShip request
	OrbitShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseCargo request with any body
	PurchaseCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseCargo(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShipRefine request with any body
	ShipRefineWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShipRefine(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefuelShip request
	RefuelShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipShipScan request
	CreateShipShipScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipSystemScan request
	CreateShipSystemScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipWaypointScan request
	CreateShipWaypointScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SellCargo request with any body
	SellCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SellCargo(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSurvey request
	CreateSurvey(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferCargo request with any body
	TransferCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TransferCargo(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WarpShip request with any body
	WarpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WarpShip(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Register request with any body
	RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystems request
	GetSystems(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystem request
	GetSystem(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemWaypoints request
	GetSystemWaypoints(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWaypoint request
	GetWaypoint(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJumpGate request
	GetJumpGate(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarket request
	GetMarket(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipyard request
	GetShipyard(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFactions(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaction(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactionRequest(c.Server, factionSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverContractWithBody(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverContractRequestWithBody(c.Server, contractId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverContract(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverContractRequest(c.Server, contractId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FulfillContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFulfillContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShips(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShip(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShipCargo(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipCargoRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChart(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChartRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipCooldown(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipCooldownRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DockShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDockShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResourcesWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResources(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JettisonWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJettisonRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Jettison(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJettisonRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JumpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJumpShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JumpShip(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJumpShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipNav(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipNavRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShipNavWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShipNavRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShipNav(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShipNavRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NavigateShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNavigateShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NavigateShip(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNavigateShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrbitShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrbitShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseCargo(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShipRefineWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShipRefineRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShipRefine(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShipRefineRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefuelShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefuelShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipShipScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipShipScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipSystemScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipSystemScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipWaypointScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipWaypointScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SellCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSellCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SellCargo(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSellCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSurvey(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSurveyRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferCargo(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WarpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWarpShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WarpShip(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWarpShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystems(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystem(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemRequest(c.Server, systemSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemWaypoints(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemWaypointsRequest(c.Server, systemSymbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWaypoint(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWaypointRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJumpGate(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJumpGateRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarket(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipyard(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipyardRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFactionsRequest generates requests for GetFactions
func NewGetFactionsRequest(server string, params *GetFactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFactionRequest generates requests for GetFaction
func NewGetFactionRequest(server string, factionSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factionSymbol", runtime.ParamLocationPath, factionSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyAgentRequest generates requests for GetMyAgent
func NewGetMyAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/agent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractsRequest generates requests for GetContracts
func NewGetContractsRequest(server string, params *GetContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractRequest generates requests for GetContract
func NewGetContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptContractRequest generates requests for AcceptContract
func NewAcceptContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeliverContractRequest calls the generic DeliverContract builder with application/json body
func NewDeliverContractRequest(server string, contractId string, body DeliverContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeliverContractRequestWithBody(server, contractId, "application/json", bodyReader)
}

// NewDeliverContractRequestWithBody generates requests for DeliverContract with any type of body
func NewDeliverContractRequestWithBody(server string, contractId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/deliver", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFulfillContractRequest generates requests for FulfillContract
func NewFulfillContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/fulfill", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyShipsRequest generates requests for GetMyShips
func NewGetMyShipsRequest(server string, params *GetMyShipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseShipRequest calls the generic PurchaseShip builder with application/json body
func NewPurchaseShipRequest(server string, body PurchaseShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseShipRequestWithBody(server, "application/json", bodyReader)
}

// NewPurchaseShipRequestWithBody generates requests for PurchaseShip with any type of body
func NewPurchaseShipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyShipRequest generates requests for GetMyShip
func NewGetMyShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyShipCargoRequest generates requests for GetMyShipCargo
func NewGetMyShipCargoRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/cargo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChartRequest generates requests for CreateChart
func NewCreateChartRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipCooldownRequest generates requests for GetShipCooldown
func NewGetShipCooldownRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/cooldown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDockShipRequest generates requests for DockShip
func NewDockShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/dock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExtractResourcesRequest calls the generic ExtractResources builder with application/json body
func NewExtractResourcesRequest(server string, shipSymbol string, body ExtractResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtractResourcesRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewExtractResourcesRequestWithBody generates requests for ExtractResources with any type of body
func NewExtractResourcesRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJettisonRequest calls the generic Jettison builder with application/json body
func NewJettisonRequest(server string, shipSymbol string, body JettisonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJettisonRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewJettisonRequestWithBody generates requests for Jettison with any type of body
func NewJettisonRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/jettison", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJumpShipRequest calls the generic JumpShip builder with application/json body
func NewJumpShipRequest(server string, shipSymbol string, body JumpShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJumpShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewJumpShipRequestWithBody generates requests for JumpShip with any type of body
func NewJumpShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/jump", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShipNavRequest generates requests for GetShipNav
func NewGetShipNavRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/nav", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchShipNavRequest calls the generic PatchShipNav builder with application/json body
func NewPatchShipNavRequest(server string, shipSymbol string, body PatchShipNavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchShipNavRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewPatchShipNavRequestWithBody generates requests for PatchShipNav with any type of body
func NewPatchShipNavRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/nav", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNavigateShipRequest calls the generic NavigateShip builder with application/json body
func NewNavigateShipRequest(server string, shipSymbol string, body NavigateShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNavigateShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewNavigateShipRequestWithBody generates requests for NavigateShip with any type of body
func NewNavigateShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/navigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrbitShipRequest generates requests for OrbitShip
func NewOrbitShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/orbit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseCargoRequest calls the generic PurchaseCargo builder with application/json body
func NewPurchaseCargoRequest(server string, shipSymbol string, body PurchaseCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewPurchaseCargoRequestWithBody generates requests for PurchaseCargo with any type of body
func NewPurchaseCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/purchase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShipRefineRequest calls the generic ShipRefine builder with application/json body
func NewShipRefineRequest(server string, shipSymbol string, body ShipRefineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShipRefineRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewShipRefineRequestWithBody generates requests for ShipRefine with any type of body
func NewShipRefineRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/refine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefuelShipRequest generates requests for RefuelShip
func NewRefuelShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/refuel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipShipScanRequest generates requests for CreateShipShipScan
func NewCreateShipShipScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/ships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipSystemScanRequest generates requests for CreateShipSystemScan
func NewCreateShipSystemScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/systems", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipWaypointScanRequest generates requests for CreateShipWaypointScan
func NewCreateShipWaypointScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/waypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSellCargoRequest calls the generic SellCargo builder with application/json body
func NewSellCargoRequest(server string, shipSymbol string, body SellCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSellCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewSellCargoRequestWithBody generates requests for SellCargo with any type of body
func NewSellCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSurveyRequest generates requests for CreateSurvey
func NewCreateSurveyRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/survey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTransferCargoRequest calls the generic TransferCargo builder with application/json body
func NewTransferCargoRequest(server string, shipSymbol string, body TransferCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewTransferCargoRequestWithBody generates requests for TransferCargo with any type of body
func NewTransferCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWarpShipRequest calls the generic WarpShip builder with application/json body
func NewWarpShipRequest(server string, shipSymbol string, body WarpShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWarpShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewWarpShipRequestWithBody generates requests for WarpShip with any type of body
func NewWarpShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/warp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterRequest calls the generic Register builder with application/json body
func NewRegisterRequest(server string, body RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemsRequest generates requests for GetSystems
func NewGetSystemsRequest(server string, params *GetSystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemRequest generates requests for GetSystem
func NewGetSystemRequest(server string, systemSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemWaypointsRequest generates requests for GetSystemWaypoints
func NewGetSystemWaypointsRequest(server string, systemSymbol string, params *GetSystemWaypointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWaypointRequest generates requests for GetWaypoint
func NewGetWaypointRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJumpGateRequest generates requests for GetJumpGate
func NewGetJumpGateRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/jump-gate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketRequest generates requests for GetMarket
func NewGetMarketRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/market", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipyardRequest generates requests for GetShipyard
func NewGetShipyardRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/shipyard", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFactions request
	GetFactionsWithResponse(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*GetFactionsResponse, error)

	// GetFaction request
	GetFactionWithResponse(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*GetFactionResponse, error)

	// GetMyAgent request
	GetMyAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyAgentResponse, error)

	// GetContracts request
	GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error)

	// GetContract request
	GetContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*GetContractResponse, error)

	// AcceptContract request
	AcceptContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*AcceptContractResponse, error)

	// DeliverContract request with any body
	DeliverContractWithBodyWithResponse(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error)

	DeliverContractWithResponse(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error)

	// FulfillContract request
	FulfillContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*FulfillContractResponse, error)

	// GetMyShips request
	GetMyShipsWithResponse(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*GetMyShipsResponse, error)

	// PurchaseShip request with any body
	PurchaseShipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error)

	PurchaseShipWithResponse(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error)

	// GetMyShip request
	GetMyShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipResponse, error)

	// GetMyShipCargo request
	GetMyShipCargoWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipCargoResponse, error)

	// CreateChart request
	CreateChartWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateChartResponse, error)

	// GetShipCooldown request
	GetShipCooldownWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipCooldownResponse, error)

	// DockShip request
	DockShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*DockShipResponse, error)

	// ExtractResources request with any body
	ExtractResourcesWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error)

	ExtractResourcesWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error)

	// Jettison request with any body
	JettisonWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JettisonResponse, error)

	JettisonWithResponse(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*JettisonResponse, error)

	// JumpShip request with any body
	JumpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JumpShipResponse, error)

	JumpShipWithResponse(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*JumpShipResponse, error)

	// GetShipNav request
	GetShipNavWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipNavResponse, error)

	// PatchShipNav request with any body
	PatchShipNavWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error)

	PatchShipNavWithResponse(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error)

	// NavigateShip request with any body
	NavigateShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error)

	NavigateShipWithResponse(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error)

	// OrbitShip request
	OrbitShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*OrbitShipResponse, error)

	// PurchaseCargo request with any body
	PurchaseCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error)

	PurchaseCargoWithResponse(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error)

	// ShipRefine request with any body
	ShipRefineWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error)

	ShipRefineWithResponse(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error)

	// RefuelShip request
	RefuelShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error)

	// CreateShipShipScan request
	CreateShipShipScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipShipScanResponse, error)

	// CreateShipSystemScan request
	CreateShipSystemScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipSystemScanResponse, error)

	// CreateShipWaypointScan request
	CreateShipWaypointScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipWaypointScanResponse, error)

	// SellCargo request with any body
	SellCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SellCargoResponse, error)

	SellCargoWithResponse(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*SellCargoResponse, error)

	// CreateSurvey request
	CreateSurveyWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateSurveyResponse, error)

	// TransferCargo request with any body
	TransferCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error)

	TransferCargoWithResponse(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error)

	// WarpShip request with any body
	WarpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WarpShipResponse, error)

	WarpShipWithResponse(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*WarpShipResponse, error)

	// Register request with any body
	RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// GetSystems request
	GetSystemsWithResponse(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*GetSystemsResponse, error)

	// GetSystem request
	GetSystemWithResponse(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error)

	// GetSystemWaypoints request
	GetSystemWaypointsWithResponse(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*GetSystemWaypointsResponse, error)

	// GetWaypoint request
	GetWaypointWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetWaypointResponse, error)

	// GetJumpGate request
	GetJumpGateWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetJumpGateResponse, error)

	// GetMarket request
	GetMarketWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetMarketResponse, error)

	// GetShipyard request
	GetShipyardWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetShipyardResponse, error)
}

type GetFactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Faction `json:"data"`
		Meta Meta      `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Faction `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Agent `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Contract `json:"data"`
		Meta Meta       `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Contract `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Agent    Agent    `json:"agent"`
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeliverContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo    ShipCargo `json:"cargo"`
			Contract Contract  `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r DeliverContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeliverContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FulfillContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Agent    Agent    `json:"agent"`
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r FulfillContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FulfillContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Ship `json:"data"`
		Meta Meta   `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent Agent `json:"agent"`

			// Ship A ship
			Ship        Ship                `json:"ship"`
			Transaction ShipyardTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PurchaseShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A ship
		Data Ship `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ShipCargo `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Chart The chart of a system or waypoint, which makes the location visible to other agents.
			Chart Chart `json:"chart"`

			// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
			Waypoint Waypoint `json:"waypoint"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipCooldownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A cooldown is a period of time in which a ship cannot perform certain actions.
		Data Cooldown `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipCooldownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipCooldownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DockShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r DockShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DockShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtractResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Cargo ShipCargo `json:"cargo"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown   Cooldown   `json:"cooldown"`
			Extraction Extraction `json:"extraction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ExtractResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtractResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JettisonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo ShipCargo `json:"cargo"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r JettisonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JettisonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JumpShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Nav The navigation information of the ship.
			Nav *ShipNav `json:"nav,omitempty"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r JumpShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JumpShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipNavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The navigation information of the ship.
		Data ShipNav `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipNavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipNavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchShipNavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The navigation information of the ship.
		Data ShipNav `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchShipNavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchShipNavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NavigateShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r NavigateShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NavigateShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrbitShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r OrbitShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrbitShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent       Agent             `json:"agent"`
			Cargo       ShipCargo         `json:"cargo"`
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PurchaseCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShipRefineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo    ShipCargo `json:"cargo"`
			Consumed []struct {
				TradeSymbol *string `json:"tradeSymbol,omitempty"`
				Units       *int    `json:"units,omitempty"`
			} `json:"consumed"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`
			Produced []struct {
				TradeSymbol *string `json:"tradeSymbol,omitempty"`
				Units       *int    `json:"units,omitempty"`
			} `json:"produced"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ShipRefineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShipRefineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefuelShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Agent Agent `json:"agent"`

			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RefuelShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefuelShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipShipScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown      `json:"cooldown"`
			Ships    []ScannedShip `json:"ships"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipShipScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipShipScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipSystemScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown        `json:"cooldown"`
			Systems  []ScannedSystem `json:"systems"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipSystemScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipSystemScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipWaypointScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown  Cooldown          `json:"cooldown"`
			Waypoints []ScannedWaypoint `json:"waypoints"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipWaypointScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipWaypointScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SellCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent       Agent             `json:"agent"`
			Cargo       ShipCargo         `json:"cargo"`
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r SellCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SellCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSurveyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`
			Surveys  []Survey `json:"surveys"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSurveyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSurveyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo ShipCargo `json:"cargo"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r TransferCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WarpShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r WarpShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WarpShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent    Agent    `json:"agent"`
			Contract Contract `json:"contract"`
			Faction  Faction  `json:"faction"`

			// Ship A ship
			Ship Ship `json:"ship"`

			// Token A Bearer token for accessing secured API endpoints.
			Token string `json:"token"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []System `json:"data"`
		Meta Meta     `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data System `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemWaypointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Waypoint `json:"data"`
		Meta Meta       `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemWaypointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemWaypointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWaypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
		Data Waypoint `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWaypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWaypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJumpGateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data JumpGate `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetJumpGateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJumpGateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Market `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipyardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Shipyard `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipyardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipyardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFactionsWithResponse request returning *GetFactionsResponse
func (c *ClientWithResponses) GetFactionsWithResponse(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*GetFactionsResponse, error) {
	rsp, err := c.GetFactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactionsResponse(rsp)
}

// GetFactionWithResponse request returning *GetFactionResponse
func (c *ClientWithResponses) GetFactionWithResponse(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*GetFactionResponse, error) {
	rsp, err := c.GetFaction(ctx, factionSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactionResponse(rsp)
}

// GetMyAgentWithResponse request returning *GetMyAgentResponse
func (c *ClientWithResponses) GetMyAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyAgentResponse, error) {
	rsp, err := c.GetMyAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyAgentResponse(rsp)
}

// GetContractsWithResponse request returning *GetContractsResponse
func (c *ClientWithResponses) GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error) {
	rsp, err := c.GetContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsResponse(rsp)
}

// GetContractWithResponse request returning *GetContractResponse
func (c *ClientWithResponses) GetContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*GetContractResponse, error) {
	rsp, err := c.GetContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractResponse(rsp)
}

// AcceptContractWithResponse request returning *AcceptContractResponse
func (c *ClientWithResponses) AcceptContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*AcceptContractResponse, error) {
	rsp, err := c.AcceptContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptContractResponse(rsp)
}

// DeliverContractWithBodyWithResponse request with arbitrary body returning *DeliverContractResponse
func (c *ClientWithResponses) DeliverContractWithBodyWithResponse(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error) {
	rsp, err := c.DeliverContractWithBody(ctx, contractId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverContractResponse(rsp)
}

func (c *ClientWithResponses) DeliverContractWithResponse(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error) {
	rsp, err := c.DeliverContract(ctx, contractId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverContractResponse(rsp)
}

// FulfillContractWithResponse request returning *FulfillContractResponse
func (c *ClientWithResponses) FulfillContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*FulfillContractResponse, error) {
	rsp, err := c.FulfillContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFulfillContractResponse(rsp)
}

// GetMyShipsWithResponse request returning *GetMyShipsResponse
func (c *ClientWithResponses) GetMyShipsWithResponse(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*GetMyShipsResponse, error) {
	rsp, err := c.GetMyShips(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipsResponse(rsp)
}

// PurchaseShipWithBodyWithResponse request with arbitrary body returning *PurchaseShipResponse
func (c *ClientWithResponses) PurchaseShipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error) {
	rsp, err := c.PurchaseShipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipResponse(rsp)
}

func (c *ClientWithResponses) PurchaseShipWithResponse(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error) {
	rsp, err := c.PurchaseShip(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipResponse(rsp)
}

// GetMyShipWithResponse request returning *GetMyShipResponse
func (c *ClientWithResponses) GetMyShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipResponse, error) {
	rsp, err := c.GetMyShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipResponse(rsp)
}

// GetMyShipCargoWithResponse request returning *GetMyShipCargoResponse
func (c *ClientWithResponses) GetMyShipCargoWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipCargoResponse, error) {
	rsp, err := c.GetMyShipCargo(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipCargoResponse(rsp)
}

// CreateChartWithResponse request returning *CreateChartResponse
func (c *ClientWithResponses) CreateChartWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateChartResponse, error) {
	rsp, err := c.CreateChart(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChartResponse(rsp)
}

// GetShipCooldownWithResponse request returning *GetShipCooldownResponse
func (c *ClientWithResponses) GetShipCooldownWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipCooldownResponse, error) {
	rsp, err := c.GetShipCooldown(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipCooldownResponse(rsp)
}

// DockShipWithResponse request returning *DockShipResponse
func (c *ClientWithResponses) DockShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*DockShipResponse, error) {
	rsp, err := c.DockShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDockShipResponse(rsp)
}

// ExtractResourcesWithBodyWithResponse request with arbitrary body returning *ExtractResourcesResponse
func (c *ClientWithResponses) ExtractResourcesWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error) {
	rsp, err := c.ExtractResourcesWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesResponse(rsp)
}

func (c *ClientWithResponses) ExtractResourcesWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error) {
	rsp, err := c.ExtractResources(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesResponse(rsp)
}

// JettisonWithBodyWithResponse request with arbitrary body returning *JettisonResponse
func (c *ClientWithResponses) JettisonWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JettisonResponse, error) {
	rsp, err := c.JettisonWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJettisonResponse(rsp)
}

func (c *ClientWithResponses) JettisonWithResponse(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*JettisonResponse, error) {
	rsp, err := c.Jettison(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJettisonResponse(rsp)
}

// JumpShipWithBodyWithResponse request with arbitrary body returning *JumpShipResponse
func (c *ClientWithResponses) JumpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JumpShipResponse, error) {
	rsp, err := c.JumpShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJumpShipResponse(rsp)
}

func (c *ClientWithResponses) JumpShipWithResponse(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*JumpShipResponse, error) {
	rsp, err := c.JumpShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJumpShipResponse(rsp)
}

// GetShipNavWithResponse request returning *GetShipNavResponse
func (c *ClientWithResponses) GetShipNavWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipNavResponse, error) {
	rsp, err := c.GetShipNav(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipNavResponse(rsp)
}

// PatchShipNavWithBodyWithResponse request with arbitrary body returning *PatchShipNavResponse
func (c *ClientWithResponses) PatchShipNavWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error) {
	rsp, err := c.PatchShipNavWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShipNavResponse(rsp)
}

func (c *ClientWithResponses) PatchShipNavWithResponse(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error) {
	rsp, err := c.PatchShipNav(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShipNavResponse(rsp)
}

// NavigateShipWithBodyWithResponse request with arbitrary body returning *NavigateShipResponse
func (c *ClientWithResponses) NavigateShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error) {
	rsp, err := c.NavigateShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNavigateShipResponse(rsp)
}

func (c *ClientWithResponses) NavigateShipWithResponse(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error) {
	rsp, err := c.NavigateShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNavigateShipResponse(rsp)
}

// OrbitShipWithResponse request returning *OrbitShipResponse
func (c *ClientWithResponses) OrbitShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*OrbitShipResponse, error) {
	rsp, err := c.OrbitShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrbitShipResponse(rsp)
}

// PurchaseCargoWithBodyWithResponse request with arbitrary body returning *PurchaseCargoResponse
func (c *ClientWithResponses) PurchaseCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error) {
	rsp, err := c.PurchaseCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseCargoResponse(rsp)
}

func (c *ClientWithResponses) PurchaseCargoWithResponse(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error) {
	rsp, err := c.PurchaseCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseCargoResponse(rsp)
}

// ShipRefineWithBodyWithResponse request with arbitrary body returning *ShipRefineResponse
func (c *ClientWithResponses) ShipRefineWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error) {
	rsp, err := c.ShipRefineWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShipRefineResponse(rsp)
}

func (c *ClientWithResponses) ShipRefineWithResponse(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error) {
	rsp, err := c.ShipRefine(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShipRefineResponse(rsp)
}

// RefuelShipWithResponse request returning *RefuelShipResponse
func (c *ClientWithResponses) RefuelShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error) {
	rsp, err := c.RefuelShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefuelShipResponse(rsp)
}

// CreateShipShipScanWithResponse request returning *CreateShipShipScanResponse
func (c *ClientWithResponses) CreateShipShipScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipShipScanResponse, error) {
	rsp, err := c.CreateShipShipScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipShipScanResponse(rsp)
}

// CreateShipSystemScanWithResponse request returning *CreateShipSystemScanResponse
func (c *ClientWithResponses) CreateShipSystemScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipSystemScanResponse, error) {
	rsp, err := c.CreateShipSystemScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipSystemScanResponse(rsp)
}

// CreateShipWaypointScanWithResponse request returning *CreateShipWaypointScanResponse
func (c *ClientWithResponses) CreateShipWaypointScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipWaypointScanResponse, error) {
	rsp, err := c.CreateShipWaypointScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipWaypointScanResponse(rsp)
}

// SellCargoWithBodyWithResponse request with arbitrary body returning *SellCargoResponse
func (c *ClientWithResponses) SellCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SellCargoResponse, error) {
	rsp, err := c.SellCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSellCargoResponse(rsp)
}

func (c *ClientWithResponses) SellCargoWithResponse(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*SellCargoResponse, error) {
	rsp, err := c.SellCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSellCargoResponse(rsp)
}

// CreateSurveyWithResponse request returning *CreateSurveyResponse
func (c *ClientWithResponses) CreateSurveyWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateSurveyResponse, error) {
	rsp, err := c.CreateSurvey(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveyResponse(rsp)
}

// TransferCargoWithBodyWithResponse request with arbitrary body returning *TransferCargoResponse
func (c *ClientWithResponses) TransferCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error) {
	rsp, err := c.TransferCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferCargoResponse(rsp)
}

func (c *ClientWithResponses) TransferCargoWithResponse(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error) {
	rsp, err := c.TransferCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferCargoResponse(rsp)
}

// WarpShipWithBodyWithResponse request with arbitrary body returning *WarpShipResponse
func (c *ClientWithResponses) WarpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WarpShipResponse, error) {
	rsp, err := c.WarpShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWarpShipResponse(rsp)
}

func (c *ClientWithResponses) WarpShipWithResponse(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*WarpShipResponse, error) {
	rsp, err := c.WarpShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWarpShipResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.Register(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// GetSystemsWithResponse request returning *GetSystemsResponse
func (c *ClientWithResponses) GetSystemsWithResponse(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*GetSystemsResponse, error) {
	rsp, err := c.GetSystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemsResponse(rsp)
}

// GetSystemWithResponse request returning *GetSystemResponse
func (c *ClientWithResponses) GetSystemWithResponse(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error) {
	rsp, err := c.GetSystem(ctx, systemSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemResponse(rsp)
}

// GetSystemWaypointsWithResponse request returning *GetSystemWaypointsResponse
func (c *ClientWithResponses) GetSystemWaypointsWithResponse(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*GetSystemWaypointsResponse, error) {
	rsp, err := c.GetSystemWaypoints(ctx, systemSymbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemWaypointsResponse(rsp)
}

// GetWaypointWithResponse request returning *GetWaypointResponse
func (c *ClientWithResponses) GetWaypointWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetWaypointResponse, error) {
	rsp, err := c.GetWaypoint(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWaypointResponse(rsp)
}

// GetJumpGateWithResponse request returning *GetJumpGateResponse
func (c *ClientWithResponses) GetJumpGateWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetJumpGateResponse, error) {
	rsp, err := c.GetJumpGate(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJumpGateResponse(rsp)
}

// GetMarketWithResponse request returning *GetMarketResponse
func (c *ClientWithResponses) GetMarketWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetMarketResponse, error) {
	rsp, err := c.GetMarket(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketResponse(rsp)
}

// GetShipyardWithResponse request returning *GetShipyardResponse
func (c *ClientWithResponses) GetShipyardWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetShipyardResponse, error) {
	rsp, err := c.GetShipyard(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipyardResponse(rsp)
}

// ParseGetFactionsResponse parses an HTTP response from a GetFactionsWithResponse call
func ParseGetFactionsResponse(rsp *http.Response) (*GetFactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Faction `json:"data"`
			Meta Meta      `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFactionResponse parses an HTTP response from a GetFactionWithResponse call
func ParseGetFactionResponse(rsp *http.Response) (*GetFactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Faction `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyAgentResponse parses an HTTP response from a GetMyAgentWithResponse call
func ParseGetMyAgentResponse(rsp *http.Response) (*GetMyAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Agent `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractsResponse parses an HTTP response from a GetContractsWithResponse call
func ParseGetContractsResponse(rsp *http.Response) (*GetContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Contract `json:"data"`
			Meta Meta       `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractResponse parses an HTTP response from a GetContractWithResponse call
func ParseGetContractResponse(rsp *http.Response) (*GetContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Contract `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptContractResponse parses an HTTP response from a AcceptContractWithResponse call
func ParseAcceptContractResponse(rsp *http.Response) (*AcceptContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Agent    Agent    `json:"agent"`
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeliverContractResponse parses an HTTP response from a DeliverContractWithResponse call
func ParseDeliverContractResponse(rsp *http.Response) (*DeliverContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeliverContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo    ShipCargo `json:"cargo"`
				Contract Contract  `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFulfillContractResponse parses an HTTP response from a FulfillContractWithResponse call
func ParseFulfillContractResponse(rsp *http.Response) (*FulfillContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FulfillContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Agent    Agent    `json:"agent"`
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyShipsResponse parses an HTTP response from a GetMyShipsWithResponse call
func ParseGetMyShipsResponse(rsp *http.Response) (*GetMyShipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Ship `json:"data"`
			Meta Meta   `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePurchaseShipResponse parses an HTTP response from a PurchaseShipWithResponse call
func ParsePurchaseShipResponse(rsp *http.Response) (*PurchaseShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent Agent `json:"agent"`

				// Ship A ship
				Ship        Ship                `json:"ship"`
				Transaction ShipyardTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMyShipResponse parses an HTTP response from a GetMyShipWithResponse call
func ParseGetMyShipResponse(rsp *http.Response) (*GetMyShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A ship
			Data Ship `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyShipCargoResponse parses an HTTP response from a GetMyShipCargoWithResponse call
func ParseGetMyShipCargoResponse(rsp *http.Response) (*GetMyShipCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ShipCargo `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChartResponse parses an HTTP response from a CreateChartWithResponse call
func ParseCreateChartResponse(rsp *http.Response) (*CreateChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Chart The chart of a system or waypoint, which makes the location visible to other agents.
				Chart Chart `json:"chart"`

				// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
				Waypoint Waypoint `json:"waypoint"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetShipCooldownResponse parses an HTTP response from a GetShipCooldownWithResponse call
func ParseGetShipCooldownResponse(rsp *http.Response) (*GetShipCooldownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipCooldownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A cooldown is a period of time in which a ship cannot perform certain actions.
			Data Cooldown `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDockShipResponse parses an HTTP response from a DockShipWithResponse call
func ParseDockShipResponse(rsp *http.Response) (*DockShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DockShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExtractResourcesResponse parses an HTTP response from a ExtractResourcesWithResponse call
func ParseExtractResourcesResponse(rsp *http.Response) (*ExtractResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtractResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Cargo ShipCargo `json:"cargo"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown   Cooldown   `json:"cooldown"`
				Extraction Extraction `json:"extraction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJettisonResponse parses an HTTP response from a JettisonWithResponse call
func ParseJettisonResponse(rsp *http.Response) (*JettisonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JettisonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo ShipCargo `json:"cargo"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJumpShipResponse parses an HTTP response from a JumpShipWithResponse call
func ParseJumpShipResponse(rsp *http.Response) (*JumpShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JumpShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Nav The navigation information of the ship.
				Nav *ShipNav `json:"nav,omitempty"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShipNavResponse parses an HTTP response from a GetShipNavWithResponse call
func ParseGetShipNavResponse(rsp *http.Response) (*GetShipNavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipNavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The navigation information of the ship.
			Data ShipNav `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchShipNavResponse parses an HTTP response from a PatchShipNavWithResponse call
func ParsePatchShipNavResponse(rsp *http.Response) (*PatchShipNavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchShipNavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The navigation information of the ship.
			Data ShipNav `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNavigateShipResponse parses an HTTP response from a NavigateShipWithResponse call
func ParseNavigateShipResponse(rsp *http.Response) (*NavigateShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NavigateShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrbitShipResponse parses an HTTP response from a OrbitShipWithResponse call
func ParseOrbitShipResponse(rsp *http.Response) (*OrbitShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrbitShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePurchaseCargoResponse parses an HTTP response from a PurchaseCargoWithResponse call
func ParsePurchaseCargoResponse(rsp *http.Response) (*PurchaseCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent       Agent             `json:"agent"`
				Cargo       ShipCargo         `json:"cargo"`
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseShipRefineResponse parses an HTTP response from a ShipRefineWithResponse call
func ParseShipRefineResponse(rsp *http.Response) (*ShipRefineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShipRefineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo    ShipCargo `json:"cargo"`
				Consumed []struct {
					TradeSymbol *string `json:"tradeSymbol,omitempty"`
					Units       *int    `json:"units,omitempty"`
				} `json:"consumed"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`
				Produced []struct {
					TradeSymbol *string `json:"tradeSymbol,omitempty"`
					Units       *int    `json:"units,omitempty"`
				} `json:"produced"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefuelShipResponse parses an HTTP response from a RefuelShipWithResponse call
func ParseRefuelShipResponse(rsp *http.Response) (*RefuelShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefuelShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Agent Agent `json:"agent"`

				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateShipShipScanResponse parses an HTTP response from a CreateShipShipScanWithResponse call
func ParseCreateShipShipScanResponse(rsp *http.Response) (*CreateShipShipScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipShipScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown      `json:"cooldown"`
				Ships    []ScannedShip `json:"ships"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateShipSystemScanResponse parses an HTTP response from a CreateShipSystemScanWithResponse call
func ParseCreateShipSystemScanResponse(rsp *http.Response) (*CreateShipSystemScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipSystemScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown        `json:"cooldown"`
				Systems  []ScannedSystem `json:"systems"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateShipWaypointScanResponse parses an HTTP response from a CreateShipWaypointScanWithResponse call
func ParseCreateShipWaypointScanResponse(rsp *http.Response) (*CreateShipWaypointScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipWaypointScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown  Cooldown          `json:"cooldown"`
				Waypoints []ScannedWaypoint `json:"waypoints"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSellCargoResponse parses an HTTP response from a SellCargoWithResponse call
func ParseSellCargoResponse(rsp *http.Response) (*SellCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SellCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent       Agent             `json:"agent"`
				Cargo       ShipCargo         `json:"cargo"`
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateSurveyResponse parses an HTTP response from a CreateSurveyWithResponse call
func ParseCreateSurveyResponse(rsp *http.Response) (*CreateSurveyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSurveyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`
				Surveys  []Survey `json:"surveys"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTransferCargoResponse parses an HTTP response from a TransferCargoWithResponse call
func ParseTransferCargoResponse(rsp *http.Response) (*TransferCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo ShipCargo `json:"cargo"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWarpShipResponse parses an HTTP response from a WarpShipWithResponse call
func ParseWarpShipResponse(rsp *http.Response) (*WarpShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WarpShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent    Agent    `json:"agent"`
				Contract Contract `json:"contract"`
				Faction  Faction  `json:"faction"`

				// Ship A ship
				Ship Ship `json:"ship"`

				// Token A Bearer token for accessing secured API endpoints.
				Token string `json:"token"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSystemsResponse parses an HTTP response from a GetSystemsWithResponse call
func ParseGetSystemsResponse(rsp *http.Response) (*GetSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []System `json:"data"`
			Meta Meta     `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemResponse parses an HTTP response from a GetSystemWithResponse call
func ParseGetSystemResponse(rsp *http.Response) (*GetSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data System `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemWaypointsResponse parses an HTTP response from a GetSystemWaypointsWithResponse call
func ParseGetSystemWaypointsResponse(rsp *http.Response) (*GetSystemWaypointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemWaypointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Waypoint `json:"data"`
			Meta Meta       `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWaypointResponse parses an HTTP response from a GetWaypointWithResponse call
func ParseGetWaypointResponse(rsp *http.Response) (*GetWaypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWaypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
			Data Waypoint `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJumpGateResponse parses an HTTP response from a GetJumpGateWithResponse call
func ParseGetJumpGateResponse(rsp *http.Response) (*GetJumpGateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJumpGateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data JumpGate `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketResponse parses an HTTP response from a GetMarketWithResponse call
func ParseGetMarketResponse(rsp *http.Response) (*GetMarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Market `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShipyardResponse parses an HTTP response from a GetShipyardWithResponse call
func ParseGetShipyardResponse(rsp *http.Response) (*GetShipyardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipyardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Shipyard `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Factions
	// (GET /factions)
	GetFactions(ctx echo.Context, params GetFactionsParams) error
	// Get Faction
	// (GET /factions/{factionSymbol})
	GetFaction(ctx echo.Context, factionSymbol string) error
	// My Agent Details
	// (GET /my/agent)
	GetMyAgent(ctx echo.Context) error
	// List Contracts
	// (GET /my/contracts)
	GetContracts(ctx echo.Context, params GetContractsParams) error
	// Get Contract
	// (GET /my/contracts/{contractId})
	GetContract(ctx echo.Context, contractId string) error
	// Accept Contract
	// (POST /my/contracts/{contractId}/accept)
	AcceptContract(ctx echo.Context, contractId string) error
	// Deliver Contract
	// (POST /my/contracts/{contractId}/deliver)
	DeliverContract(ctx echo.Context, contractId string) error
	// Fulfill Contract
	// (POST /my/contracts/{contractId}/fulfill)
	FulfillContract(ctx echo.Context, contractId string) error
	// List Ships
	// (GET /my/ships)
	GetMyShips(ctx echo.Context, params GetMyShipsParams) error
	// Purchase Ship
	// (POST /my/ships)
	PurchaseShip(ctx echo.Context) error
	// Get Ship
	// (GET /my/ships/{shipSymbol})
	GetMyShip(ctx echo.Context, shipSymbol string) error
	// Get Ship Cargo
	// (GET /my/ships/{shipSymbol}/cargo)
	GetMyShipCargo(ctx echo.Context, shipSymbol string) error
	// Create Chart
	// (POST /my/ships/{shipSymbol}/chart)
	CreateChart(ctx echo.Context, shipSymbol string) error
	// Get Ship Cooldown
	// (GET /my/ships/{shipSymbol}/cooldown)
	GetShipCooldown(ctx echo.Context, shipSymbol string) error
	// Dock Ship
	// (POST /my/ships/{shipSymbol}/dock)
	DockShip(ctx echo.Context, shipSymbol string) error
	// Extract Resources
	// (POST /my/ships/{shipSymbol}/extract)
	ExtractResources(ctx echo.Context, shipSymbol string) error
	// Jettison Cargo
	// (POST /my/ships/{shipSymbol}/jettison)
	Jettison(ctx echo.Context, shipSymbol string) error
	// Jump Ship
	// (POST /my/ships/{shipSymbol}/jump)
	JumpShip(ctx echo.Context, shipSymbol string) error
	// Get Ship Nav
	// (GET /my/ships/{shipSymbol}/nav)
	GetShipNav(ctx echo.Context, shipSymbol string) error
	// Patch Ship Nav
	// (PATCH /my/ships/{shipSymbol}/nav)
	PatchShipNav(ctx echo.Context, shipSymbol string) error
	// Navigate Ship
	// (POST /my/ships/{shipSymbol}/navigate)
	NavigateShip(ctx echo.Context, shipSymbol string) error
	// Orbit Ship
	// (POST /my/ships/{shipSymbol}/orbit)
	OrbitShip(ctx echo.Context, shipSymbol string) error
	// Purchase Cargo
	// (POST /my/ships/{shipSymbol}/purchase)
	PurchaseCargo(ctx echo.Context, shipSymbol string) error
	// Ship Refine
	// (POST /my/ships/{shipSymbol}/refine)
	ShipRefine(ctx echo.Context, shipSymbol string) error
	// Refuel Ship
	// (POST /my/ships/{shipSymbol}/refuel)
	RefuelShip(ctx echo.Context, shipSymbol string) error
	// Scan Ships
	// (POST /my/ships/{shipSymbol}/scan/ships)
	CreateShipShipScan(ctx echo.Context, shipSymbol string) error
	// Scan Systems
	// (POST /my/ships/{shipSymbol}/scan/systems)
	CreateShipSystemScan(ctx echo.Context, shipSymbol string) error
	// Scan Waypoints
	// (POST /my/ships/{shipSymbol}/scan/waypoints)
	CreateShipWaypointScan(ctx echo.Context, shipSymbol string) error
	// Sell Cargo
	// (POST /my/ships/{shipSymbol}/sell)
	SellCargo(ctx echo.Context, shipSymbol string) error
	// Create Survey
	// (POST /my/ships/{shipSymbol}/survey)
	CreateSurvey(ctx echo.Context, shipSymbol string) error
	// Transfer Cargo
	// (POST /my/ships/{shipSymbol}/transfer)
	TransferCargo(ctx echo.Context, shipSymbol string) error
	// Warp Ship
	// (POST /my/ships/{shipSymbol}/warp)
	WarpShip(ctx echo.Context, shipSymbol string) error
	// Register New Agent
	// (POST /register)
	Register(ctx echo.Context) error
	// List Systems
	// (GET /systems)
	GetSystems(ctx echo.Context, params GetSystemsParams) error
	// Get System
	// (GET /systems/{systemSymbol})
	GetSystem(ctx echo.Context, systemSymbol string) error
	// List Waypoints
	// (GET /systems/{systemSymbol}/waypoints)
	GetSystemWaypoints(ctx echo.Context, systemSymbol string, params GetSystemWaypointsParams) error
	// Get Waypoint
	// (GET /systems/{systemSymbol}/waypoints/{waypointSymbol})
	GetWaypoint(ctx echo.Context, systemSymbol string, waypointSymbol string) error
	// Get Jump Gate
	// (GET /systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate)
	GetJumpGate(ctx echo.Context, systemSymbol string, waypointSymbol string) error
	// Get Market
	// (GET /systems/{systemSymbol}/waypoints/{waypointSymbol}/market)
	GetMarket(ctx echo.Context, systemSymbol string, waypointSymbol string) error
	// Get Shipyard
	// (GET /systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard)
	GetShipyard(ctx echo.Context, systemSymbol string, waypointSymbol string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetFactions(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFactions(ctx, params)
	return err
}

// GetFaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetFaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "factionSymbol" -------------
	var factionSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "factionSymbol", runtime.ParamLocationPath, ctx.Param("factionSymbol"), &factionSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter factionSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFaction(ctx, factionSymbol)
	return err
}

// GetMyAgent converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyAgent(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyAgent(ctx)
	return err
}

// GetContracts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContracts(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContracts(ctx, params)
	return err
}

// GetContract converts echo context to params.
func (w *ServerInterfaceWrapper) GetContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractId" -------------
	var contractId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "contractId", runtime.ParamLocationPath, ctx.Param("contractId"), &contractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractId: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContract(ctx, contractId)
	return err
}

// AcceptContract converts echo context to params.
func (w *ServerInterfaceWrapper) AcceptContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractId" -------------
	var contractId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "contractId", runtime.ParamLocationPath, ctx.Param("contractId"), &contractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractId: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AcceptContract(ctx, contractId)
	return err
}

// DeliverContract converts echo context to params.
func (w *ServerInterfaceWrapper) DeliverContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractId" -------------
	var contractId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "contractId", runtime.ParamLocationPath, ctx.Param("contractId"), &contractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractId: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeliverContract(ctx, contractId)
	return err
}

// FulfillContract converts echo context to params.
func (w *ServerInterfaceWrapper) FulfillContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractId" -------------
	var contractId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "contractId", runtime.ParamLocationPath, ctx.Param("contractId"), &contractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractId: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FulfillContract(ctx, contractId)
	return err
}

// GetMyShips converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyShips(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMyShipsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyShips(ctx, params)
	return err
}

// PurchaseShip converts echo context to params.
func (w *ServerInterfaceWrapper) PurchaseShip(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PurchaseShip(ctx)
	return err
}

// GetMyShip converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyShip(ctx, shipSymbol)
	return err
}

// GetMyShipCargo converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyShipCargo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyShipCargo(ctx, shipSymbol)
	return err
}

// CreateChart converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateChart(ctx, shipSymbol)
	return err
}

// GetShipCooldown converts echo context to params.
func (w *ServerInterfaceWrapper) GetShipCooldown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShipCooldown(ctx, shipSymbol)
	return err
}

// DockShip converts echo context to params.
func (w *ServerInterfaceWrapper) DockShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DockShip(ctx, shipSymbol)
	return err
}

// ExtractResources converts echo context to params.
func (w *ServerInterfaceWrapper) ExtractResources(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExtractResources(ctx, shipSymbol)
	return err
}

// Jettison converts echo context to params.
func (w *ServerInterfaceWrapper) Jettison(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Jettison(ctx, shipSymbol)
	return err
}

// JumpShip converts echo context to params.
func (w *ServerInterfaceWrapper) JumpShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JumpShip(ctx, shipSymbol)
	return err
}

// GetShipNav converts echo context to params.
func (w *ServerInterfaceWrapper) GetShipNav(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShipNav(ctx, shipSymbol)
	return err
}

// PatchShipNav converts echo context to params.
func (w *ServerInterfaceWrapper) PatchShipNav(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchShipNav(ctx, shipSymbol)
	return err
}

// NavigateShip converts echo context to params.
func (w *ServerInterfaceWrapper) NavigateShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NavigateShip(ctx, shipSymbol)
	return err
}

// OrbitShip converts echo context to params.
func (w *ServerInterfaceWrapper) OrbitShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrbitShip(ctx, shipSymbol)
	return err
}

// PurchaseCargo converts echo context to params.
func (w *ServerInterfaceWrapper) PurchaseCargo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PurchaseCargo(ctx, shipSymbol)
	return err
}

// ShipRefine converts echo context to params.
func (w *ServerInterfaceWrapper) ShipRefine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShipRefine(ctx, shipSymbol)
	return err
}

// RefuelShip converts echo context to params.
func (w *ServerInterfaceWrapper) RefuelShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RefuelShip(ctx, shipSymbol)
	return err
}

// CreateShipShipScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShipShipScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateShipShipScan(ctx, shipSymbol)
	return err
}

// CreateShipSystemScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShipSystemScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateShipSystemScan(ctx, shipSymbol)
	return err
}

// CreateShipWaypointScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShipWaypointScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateShipWaypointScan(ctx, shipSymbol)
	return err
}

// SellCargo converts echo context to params.
func (w *ServerInterfaceWrapper) SellCargo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SellCargo(ctx, shipSymbol)
	return err
}

// CreateSurvey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSurvey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSurvey(ctx, shipSymbol)
	return err
}

// TransferCargo converts echo context to params.
func (w *ServerInterfaceWrapper) TransferCargo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransferCargo(ctx, shipSymbol)
	return err
}

// WarpShip converts echo context to params.
func (w *ServerInterfaceWrapper) WarpShip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shipSymbol" -------------
	var shipSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, ctx.Param("shipSymbol"), &shipSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shipSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WarpShip(ctx, shipSymbol)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx)
	return err
}

// GetSystems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystems(ctx echo.Context) error {
	var err error

	ctx.Set(AgentTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSystemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystems(ctx, params)
	return err
}

// GetSystem converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "systemSymbol" -------------
	var systemSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, ctx.Param("systemSymbol"), &systemSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter systemSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystem(ctx, systemSymbol)
	return err
}

// GetSystemWaypoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemWaypoints(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "systemSymbol" -------------
	var systemSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, ctx.Param("systemSymbol"), &systemSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter systemSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSystemWaypointsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemWaypoints(ctx, systemSymbol, params)
	return err
}

// GetWaypoint converts echo context to params.
func (w *ServerInterfaceWrapper) GetWaypoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "systemSymbol" -------------
	var systemSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, ctx.Param("systemSymbol"), &systemSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter systemSymbol: %s", err))
	}

	// ------------- Path parameter "waypointSymbol" -------------
	var waypointSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, ctx.Param("waypointSymbol"), &waypointSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter waypointSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWaypoint(ctx, systemSymbol, waypointSymbol)
	return err
}

// GetJumpGate converts echo context to params.
func (w *ServerInterfaceWrapper) GetJumpGate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "systemSymbol" -------------
	var systemSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, ctx.Param("systemSymbol"), &systemSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter systemSymbol: %s", err))
	}

	// ------------- Path parameter "waypointSymbol" -------------
	var waypointSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, ctx.Param("waypointSymbol"), &waypointSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter waypointSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJumpGate(ctx, systemSymbol, waypointSymbol)
	return err
}

// GetMarket converts echo context to params.
func (w *ServerInterfaceWrapper) GetMarket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "systemSymbol" -------------
	var systemSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, ctx.Param("systemSymbol"), &systemSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter systemSymbol: %s", err))
	}

	// ------------- Path parameter "waypointSymbol" -------------
	var waypointSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, ctx.Param("waypointSymbol"), &waypointSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter waypointSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMarket(ctx, systemSymbol, waypointSymbol)
	return err
}

// GetShipyard converts echo context to params.
func (w *ServerInterfaceWrapper) GetShipyard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "systemSymbol" -------------
	var systemSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, ctx.Param("systemSymbol"), &systemSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter systemSymbol: %s", err))
	}

	// ------------- Path parameter "waypointSymbol" -------------
	var waypointSymbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, ctx.Param("waypointSymbol"), &waypointSymbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter waypointSymbol: %s", err))
	}

	ctx.Set(AgentTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShipyard(ctx, systemSymbol, waypointSymbol)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/factions", wrapper.GetFactions)
	router.GET(baseURL+"/factions/:factionSymbol", wrapper.GetFaction)
	router.GET(baseURL+"/my/agent", wrapper.GetMyAgent)
	router.GET(baseURL+"/my/contracts", wrapper.GetContracts)
	router.GET(baseURL+"/my/contracts/:contractId", wrapper.GetContract)
	router.POST(baseURL+"/my/contracts/:contractId/accept", wrapper.AcceptContract)
	router.POST(baseURL+"/my/contracts/:contractId/deliver", wrapper.DeliverContract)
	router.POST(baseURL+"/my/contracts/:contractId/fulfill", wrapper.FulfillContract)
	router.GET(baseURL+"/my/ships", wrapper.GetMyShips)
	router.POST(baseURL+"/my/ships", wrapper.PurchaseShip)
	router.GET(baseURL+"/my/ships/:shipSymbol", wrapper.GetMyShip)
	router.GET(baseURL+"/my/ships/:shipSymbol/cargo", wrapper.GetMyShipCargo)
	router.POST(baseURL+"/my/ships/:shipSymbol/chart", wrapper.CreateChart)
	router.GET(baseURL+"/my/ships/:shipSymbol/cooldown", wrapper.GetShipCooldown)
	router.POST(baseURL+"/my/ships/:shipSymbol/dock", wrapper.DockShip)
	router.POST(baseURL+"/my/ships/:shipSymbol/extract", wrapper.ExtractResources)
	router.POST(baseURL+"/my/ships/:shipSymbol/jettison", wrapper.Jettison)
	router.POST(baseURL+"/my/ships/:shipSymbol/jump", wrapper.JumpShip)
	router.GET(baseURL+"/my/ships/:shipSymbol/nav", wrapper.GetShipNav)
	router.PATCH(baseURL+"/my/ships/:shipSymbol/nav", wrapper.PatchShipNav)
	router.POST(baseURL+"/my/ships/:shipSymbol/navigate", wrapper.NavigateShip)
	router.POST(baseURL+"/my/ships/:shipSymbol/orbit", wrapper.OrbitShip)
	router.POST(baseURL+"/my/ships/:shipSymbol/purchase", wrapper.PurchaseCargo)
	router.POST(baseURL+"/my/ships/:shipSymbol/refine", wrapper.ShipRefine)
	router.POST(baseURL+"/my/ships/:shipSymbol/refuel", wrapper.RefuelShip)
	router.POST(baseURL+"/my/ships/:shipSymbol/scan/ships", wrapper.CreateShipShipScan)
	router.POST(baseURL+"/my/ships/:shipSymbol/scan/systems", wrapper.CreateShipSystemScan)
	router.POST(baseURL+"/my/ships/:shipSymbol/scan/waypoints", wrapper.CreateShipWaypointScan)
	router.POST(baseURL+"/my/ships/:shipSymbol/sell", wrapper.SellCargo)
	router.POST(baseURL+"/my/ships/:shipSymbol/survey", wrapper.CreateSurvey)
	router.POST(baseURL+"/my/ships/:shipSymbol/transfer", wrapper.TransferCargo)
	router.POST(baseURL+"/my/ships/:shipSymbol/warp", wrapper.WarpShip)
	router.POST(baseURL+"/register", wrapper.Register)
	router.GET(baseURL+"/systems", wrapper.GetSystems)
	router.GET(baseURL+"/systems/:systemSymbol", wrapper.GetSystem)
	router.GET(baseURL+"/systems/:systemSymbol/waypoints", wrapper.GetSystemWaypoints)
	router.GET(baseURL+"/systems/:systemSymbol/waypoints/:waypointSymbol", wrapper.GetWaypoint)
	router.GET(baseURL+"/systems/:systemSymbol/waypoints/:waypointSymbol/jump-gate", wrapper.GetJumpGate)
	router.GET(baseURL+"/systems/:systemSymbol/waypoints/:waypointSymbol/market", wrapper.GetMarket)
	router.GET(baseURL+"/systems/:systemSymbol/waypoints/:waypointSymbol/shipyard", wrapper.GetShipyard)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
